#!/bin/bash

# Caddie.sh - Core Functions
# This file contains the main caddie function and core functionality

# Default caddie home file location
CADDIE_HOME_FILE="$HOME/.caddie_home"

# Function to register core caddie commands
core_caddie_register() {
    # New modular format
    echo "core:set:home:caddie_set_home:Set caddie home directory"
    echo "core:get:home:caddie_get_home:Get current caddie home"
    echo "core:reset:home:caddie_reset_home:Reset caddie home directory"
    echo "core:help:caddie_core_help:Show core caddie help"
}

# Function to display caddie help
caddie_help() {
    echo "Caddie.sh - Development Environment Manager"
    echo "=========================================="
    echo ""
    echo "Usage: caddie <command>"
    echo ""
    echo "Command Categories:"
    echo "  home                     Home directory management"
    
    # Dynamically show loaded modules
    if caddie_module_help_loaded; then
        caddie_module_help_get
    else
        echo "  No additional modules loaded"
    fi
    
    echo ""
    echo "General Commands:"
    echo "  help                     Show this overview"
    echo "  version                  Show caddie version"
    echo ""
    echo "Detailed Help:"
    # Dynamically generate help commands for loaded modules
    if [ -n "$CADDIE_MODULE_HELP" ]; then
        echo "Available module help:"
        for moddesc in "${CADDIE_MODULES[@]}"; do
            module="${moddesc%%:*}"
            if [ -n "$module" ]; then
                echo "  caddie ${module}:help       Show detailed ${module} help"
            fi
        done
    else
        echo "  No additional modules available for detailed help"
    fi
    
    echo ""
            echo "Quick Examples:"
        echo "  caddie core:set:home ~/projects/myproject  # Set caddie home directory"
    if [ -n "$CADDIE_MODULE_HELP" ]; then
        for moddesc in "${CADDIE_MODULES[@]}"; do
            module="${moddesc%%:*}"
            case "$module" in
                "python")
                    echo "  caddie python:create myenv"
                    ;;
                "rust")
                    echo "  caddie rust:new myproject"
                    ;;
                "ios")
                    echo "  caddie ios:setup"
                    ;;
                "cross")
                    echo "  caddie env:status"
                    ;;
                "cursor")
                    echo "  caddie cursor:detect"
                    ;;
            esac
        done
    fi
    echo ""
    echo "For detailed help on any category, use: caddie <category>:help"
}

# Function to set the caddie home directory
caddie_set_home() {
    local path="$1"
    
    if [ -z "$path" ]; then
        echo "Error: Please provide a path for caddie home"
        echo "Usage: caddie core:set:home <path>"
        return 1
    fi
    
    # Expand the path (handle ~, relative paths, etc.)
    local expanded_path
    expanded_path=$(eval echo "$path")
    
    # Check if the path exists
    if [ ! -d "$expanded_path" ]; then
        echo "Error: Directory '$expanded_path' does not exist"
        return 1
    fi
    
    # Get the absolute path
    local absolute_path
    absolute_path=$(cd "$expanded_path" && pwd)
    
    # Save the path to the caddie home file
    echo "$absolute_path" > "$CADDIE_HOME_FILE"
    
    # Export the CADDIE_HOME variable
    export CADDIE_HOME="$absolute_path"
    
    echo "✓ Caddie home directory set to: $absolute_path"
}

# Function to get the caddie home directory
caddie_get_home() {
    if [ -f "$CADDIE_HOME_FILE" ]; then
        local caddie_home
        caddie_home=$(cat "$CADDIE_HOME_FILE")
        echo "Current caddie home: $caddie_home"
    else
        echo "No caddie home directory was set"
    fi
}

# Function to reset the caddie home directory
caddie_reset_home() {
    if [ -f "$CADDIE_HOME_FILE" ]; then
        rm "$CADDIE_HOME_FILE"
        unset CADDIE_HOME
        echo "✓ Caddie home directory has been reset"
    else
        echo "No caddie home directory was set"
    fi
}

# Function to show caddie version
caddie_version() {
    if [ -f "$HOME/.caddie_version" ]; then
        source "$HOME/.caddie_version"
        echo "Caddie.sh version: $CADDIE_SH_VERSION"
    else
        echo "Caddie.sh version: unknown"
    fi
}

# Function to show core caddie help
caddie_core_help() {
    echo "Core Caddie Functions"
    echo "===================="
    echo ""
    echo "Usage: caddie core:<command>"
    echo ""
    echo "Home Directory Management:"
    echo "  set:home <path>     Set caddie home directory"
    echo "  get:home            Get current caddie home"
    echo "  reset:home          Reset caddie home directory"
    echo ""
    echo "Examples:"
    echo "  caddie core:set:home ~/projects/myproject"
    echo "  caddie core:get:home"
    echo "  caddie core:reset:home"
}

# Main caddie function removed - now handled by dot_caddie

# Auto-load caddie home on shell startup
if [ -f "$CADDIE_HOME_FILE" ]; then
    export CADDIE_HOME=$(cat "$CADDIE_HOME_FILE")
fi

# Tab completion function removed - now handled by dot_caddie

# Export core functions
export -f core_caddie_register
export -f caddie_set_home
export -f caddie_get_home
export -f caddie_reset_home
export -f caddie_help
export -f caddie_version
export -f caddie_core_help
