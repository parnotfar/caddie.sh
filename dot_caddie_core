#!/bin/bash

# Caddie.sh - Core Functions
# This file contains the main caddie function and core functionality

# Default caddie home file location
CADDIE_HOME_FILE="$HOME/.caddie_home"

# Function to display caddie help
caddie_help() {
    echo "Caddie.sh - Development Environment Manager"
    echo "=========================================="
    echo ""
    echo "Usage: caddie <command>"
    echo ""
    echo "Command Categories:"
    echo "  home                     Home directory management"
    
    # Dynamically show loaded modules
    if [ -n "$CADDIE_MODULE_HELP" ]; then
        echo -e "$CADDIE_MODULE_HELP"
    else
        echo "  No additional modules loaded"
    fi
    
    echo ""
    echo "General Commands:"
    echo "  help                     Show this overview"
    echo "  version                  Show caddie version"
    echo ""
    echo "Detailed Help:"
    # Dynamically generate help commands for loaded modules
    if [ -n "$CADDIE_MODULE_HELP" ]; then
        echo "Available module help:"
        for moddesc in "${CADDIE_MODULES[@]}"; do
            module="${moddesc%%:*}"
            if [ -n "$module" ] && [ "$module" != "core" ]; then
                echo "  caddie ${module}:help       Show detailed ${module} help"
            fi
        done
    else
        echo "  No additional modules available for detailed help"
    fi
    
    echo ""
    echo "Quick Examples:"
    echo "  caddie set:home ~/projects/myproject"
    if [ -n "$CADDIE_MODULE_HELP" ]; then
        for moddesc in "${CADDIE_MODULES[@]}"; do
            module="${moddesc%%:*}"
            case "$module" in
                "python")
                    echo "  caddie python:create myenv"
                    ;;
                "rust")
                    echo "  caddie rust:new myproject"
                    ;;
                "ios")
                    echo "  caddie ios:setup"
                    ;;
                "cross")
                    echo "  caddie env:status"
                    ;;
                "cursor")
                    echo "  caddie cursor:detect"
                    ;;
            esac
        done
    fi
    echo ""
    echo "For detailed help on any category, use: caddie <category>:help"
}

# Function to set the caddie home directory
caddie_set_home() {
    local path="$1"
    
    if [ -z "$path" ]; then
        echo "Error: Please provide a path for caddie home"
        echo "Usage: caddie set:home <path>"
        return 1
    fi
    
    # Expand the path (handle ~, relative paths, etc.)
    local expanded_path
    expanded_path=$(eval echo "$path")
    
    # Check if the path exists
    if [ ! -d "$expanded_path" ]; then
        echo "Error: Directory '$expanded_path' does not exist"
        return 1
    fi
    
    # Get the absolute path
    local absolute_path
    absolute_path=$(cd "$expanded_path" && pwd)
    
    # Save the path to the caddie home file
    echo "$absolute_path" > "$CADDIE_HOME_FILE"
    
    # Export the CADDIE_HOME variable
    export CADDIE_HOME="$absolute_path"
    
    echo "✓ Caddie home directory set to: $absolute_path"
}

# Function to get the caddie home directory
caddie_get_home() {
    if [ -f "$CADDIE_HOME_FILE" ]; then
        local caddie_home
        caddie_home=$(cat "$CADDIE_HOME_FILE")
        echo "Current caddie home: $caddie_home"
    else
        echo "No caddie home directory was set"
    fi
}

# Function to reset the caddie home directory
caddie_reset_home() {
    if [ -f "$CADDIE_HOME_FILE" ]; then
        rm "$CADDIE_HOME_FILE"
        unset CADDIE_HOME
        echo "✓ Caddie home directory has been reset"
    else
        echo "No caddie home directory was set"
    fi
}

# Function to show caddie version
caddie_version() {
    if [ -f "$HOME/.caddie_version" ]; then
        source "$HOME/.caddie_version"
        echo "Caddie.sh version: $CADDIE_SH_VERSION"
    else
        echo "Caddie.sh version: unknown"
    fi
}

# Main caddie function
caddie() {
    local command="$1"
    
    case "$command" in
        "set:home")
            caddie_set_home "$2"
            ;;
        "get:home")
            caddie_get_home
            ;;
        "reset:home")
            caddie_reset_home
            ;;
        # Python commands
        "python:create")
            caddie_python_create "$2"
            ;;
        "python:activate")
            caddie_python_activate "$2"
            ;;
        "python:deactivate")
            caddie_python_deactivate
            ;;
        "python:list")
            caddie_python_list
            ;;
        "python:remove")
            caddie_python_remove "$2"
            ;;
        "python:current")
            caddie_python_current
            ;;
        "python:install")
            caddie_python_install "$2"
            ;;
        "python:uninstall")
            caddie_python_uninstall "$2"
            ;;
        "python:freeze")
            caddie_python_freeze
            ;;
        "python:sync")
            caddie_python_sync
            ;;
        "python:upgrade")
            caddie_python_upgrade "$2"
            ;;
        "python:outdated")
            caddie_python_outdated
            ;;
        "python:init")
            caddie_python_init
            ;;
        "python:test")
            caddie_python_test
            ;;
        "python:lint")
            caddie_python_lint
            ;;
        "python:format")
            caddie_python_format
            ;;
        # Rust commands
        "rust:new")
            caddie_rust_new "$2"
            ;;
        "rust:build")
            caddie_rust_build
            ;;
        "rust:run")
            caddie_rust_run
            ;;
        "rust:test")
            caddie_rust_test
            ;;
        "rust:check")
            caddie_rust_check
            ;;
        "rust:clean")
            caddie_rust_clean
            ;;
        "rust:update")
            caddie_rust_update
            ;;
        "rust:add")
            caddie_rust_add "$2"
            ;;
        "rust:remove")
            caddie_rust_remove "$2"
            ;;
        "rust:search")
            caddie_rust_search "$2"
            ;;
        "rust:outdated")
            caddie_rust_outdated
            ;;
        "rust:audit")
            caddie_rust_audit
            ;;
        "rust:toolchain")
            caddie_rust_toolchain "$2"
            ;;
        "rust:target")
            caddie_rust_target "$2"
            ;;
        "rust:component")
            caddie_rust_component "$2"
            ;;
        # iOS commands
        "ios:setup")
            caddie_ios_setup
            ;;
        "ios:simulator")
            caddie_ios_simulator
            ;;
        "ios:device")
            caddie_ios_device
            ;;
        "ios:build")
            caddie_ios_build
            ;;
        "ios:run")
            caddie_ios_run
            ;;
        "ios:test")
            caddie_ios_test
            ;;
        "ios:archive")
            caddie_ios_archive
            ;;
        "ios:clean")
            caddie_ios_clean
            ;;
        "ios:pod:install")
            caddie_ios_pod_install
            ;;
        "ios:pod:update")
            caddie_ios_pod_update
            ;;
        "ios:swift:version")
            caddie_ios_swift_version
            ;;
        "ios:xcode:version")
            caddie_ios_xcode_version
            ;;
        # Cross-language commands
        "env:status")
            caddie_env_status
            ;;
        "env:setup")
            caddie_env_setup
            ;;
        "env:reset")
            caddie_env_reset
            ;;
        "env:backup")
            caddie_env_backup
            ;;
        "template:list")
            caddie_template_list
            ;;
        "template:create")
            caddie_template_create "$2" "$3"
            ;;
        "build:all")
            caddie_build_all
            ;;
        "build:python")
            caddie_build_python
            ;;
        "build:rust")
            caddie_build_rust
            ;;
        "build:ios")
            caddie_build_ios
            ;;
        "deploy:docker")
            caddie_deploy_docker
            ;;
        "deploy:local")
            caddie_deploy_local
            ;;
        "tools:install")
            caddie_tools_install
            ;;
        "tools:setup")
            caddie_tools_setup
            ;;
        "tools:lint")
            caddie_tools_lint
            ;;
        "tools:format")
            caddie_tools_format
            ;;
        # Cursor IDE Integration commands
        "cursor:detect")
            caddie_cursor_detect
            ;;
        "cursor:setup")
            caddie_cursor_setup
            ;;
        "cursor:verify")
            caddie_cursor_verify
            ;;
        "cursor:open")
            caddie_cursor_open "$2"
            ;;
        "cursor:new")
            caddie_cursor_new "$2" "$3"
            ;;
        "cursor:workspace")
            caddie_cursor_workspace
            ;;
        "cursor:recent")
            caddie_cursor_recent
            ;;
        "cursor:switch")
            caddie_cursor_switch "$2"
            ;;
        "cursor:ai:explain")
            caddie_cursor_ai_explain "$2"
            ;;
        "cursor:ai:refactor")
            caddie_cursor_ai_refactor "$2" "$3"
            ;;
        "cursor:ai:test")
            caddie_cursor_ai_test "$2" "$3"
            ;;
        "cursor:ai:docs")
            caddie_cursor_ai_docs "$2" "$3"
            ;;
        "cursor:ai:review")
            caddie_cursor_ai_review "$2" "$3"
            ;;
        "cursor:ext:install")
            caddie_cursor_ext_install "$2"
            ;;
        "cursor:ext:list")
            caddie_cursor_ext_list
            ;;
        "cursor:ext:update")
            caddie_cursor_ext_update
            ;;
        "cursor:ext:sync")
            caddie_cursor_ext_sync
            ;;
        "cursor:ext:recommend")
            caddie_cursor_ext_recommend "$2"
            ;;
        "cursor:config:show")
            caddie_cursor_config_show
            ;;
        "cursor:config:backup")
            caddie_cursor_config_backup
            ;;
        "cursor:config:restore")
            caddie_cursor_config_restore "$2"
            ;;
        "cursor:config:sync")
            caddie_cursor_config_sync
            ;;
        "cursor:config:optimize")
            caddie_cursor_config_optimize
            ;;
        # General commands
        "help"|"--help"|"-h")
            caddie_help
            ;;
        "version"|"--version"|"-v")
            caddie_version
            ;;
        "")
            echo "Caddie.sh - Development Environment Manager"
            echo "Use 'caddie help' for available commands"
            ;;
        *)
            echo "Error: Unknown command '$command'"
            echo "Use 'caddie help' for available commands"
            return 1
            ;;
    esac
}

# Auto-load caddie home on shell startup
if [ -f "$CADDIE_HOME_FILE" ]; then
    export CADDIE_HOME=$(cat "$CADDIE_HOME_FILE")
fi

# Tab completion function for caddie command
_caddie_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    # Available caddie commands
    opts="set:home get:home reset:home python:create python:activate python:deactivate python:list python:remove python:current python:install python:uninstall python:freeze python:sync python:upgrade python:outdated python:init python:test python:lint python:format rust:new rust:build rust:run rust:test rust:check rust:clean rust:update rust:add rust:remove rust:search rust:outdated rust:audit rust:toolchain rust:target rust:component ios:setup ios:simulator ios:device ios:build ios:run ios:test ios:archive ios:clean ios:pod:install ios:pod:update ios:swift:version ios:xcode:version env:status env:setup env:reset env:backup template:list template:create build:all build:python build:rust build:ios deploy:docker deploy:local tools:install tools:setup tools:lint tools:format cursor:detect cursor:setup cursor:verify cursor:open cursor:new cursor:workspace cursor:recent cursor:switch cursor:ai:explain cursor:ai:refactor cursor:ai:test cursor:ai:docs cursor:ai:review cursor:ext:install cursor:ext:list cursor:ext:update cursor:ext:sync cursor:ext:recommend cursor:config:show cursor:config:backup cursor:config:restore cursor:config:sync cursor:config:optimize help version --help -h --version -v"
    
    # If we're completing the first argument (command)
    if [ ${COMP_CWORD} -eq 1 ]; then
        # Use compgen to generate completions from our options
        local IFS=$'\n'
        COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
        return 0
    fi
    
    # Handle completion for specific commands that take arguments
    case "${prev}" in
        "set:home")
            # Complete with directory names
            COMPREPLY=( $(compgen -d -- "${cur}") )
            return 0
            ;;
        "python:create"|"python:activate"|"python:remove")
            # Complete with existing virtual environment names
            if [ -d "$HOME/.virtualenvs" ]; then
                local venvs=$(ls "$HOME/.virtualenvs" 2>/dev/null)
                COMPREPLY=( $(compgen -W "${venvs}" -- "${cur}") )
            fi
            return 0
            ;;
        "python:install"|"python:uninstall"|"python:upgrade")
            # Complete with installed packages (if pip is available)
            if command -v pip >/dev/null 2>&1; then
                local packages=$(pip list --format=freeze 2>/dev/null | cut -d'=' -f1)
                COMPREPLY=( $(compgen -W "${packages}" -- "${cur}") )
            fi
            return 0
            ;;
        "rust:new")
            # Complete with directory names for project location
            COMPREPLY=( $(compgen -d -- "${cur}") )
            return 0
            ;;
        "rust:add"|"rust:remove")
            # Complete with installed crates (if cargo is available)
            if [ -f "Cargo.toml" ] && command -v cargo >/dev/null 2>&1; then
                local crates=$(grep -E '^[[:space:]]*[a-zA-Z0-9_-]+[[:space:]]*=' Cargo.toml 2>/dev/null | sed 's/[[:space:]]*\([a-zA-Z0-9_-]*\)[[:space:]]*=.*/\1/')
                COMPREPLY=( $(compgen -W "${crates}" -- "${cur}") )
            fi
            return 0
            ;;
        "rust:toolchain")
            # Complete with common Rust toolchain versions
            local toolchains="stable beta nightly"
            COMPREPLY=( $(compgen -W "${toolchains}" -- "${cur}") )
            return 0
            ;;
        "rust:target")
            # Complete with common Rust targets
            local targets="x86_64-unknown-linux-gnu aarch64-apple-darwin x86_64-apple-darwin x86_64-pc-windows-msvc"
            COMPREPLY=( $(compgen -W "${targets}" -- "${cur}") )
            return 0
            ;;
        "rust:component")
            # Complete with common Rust components
            local components="clippy rustfmt rust-src rust-analysis"
            COMPREPLY=( $(compgen -W "${components}" -- "${cur}") )
            return 0
            ;;
        "template:create")
            # Complete with available template types
            local templates="web cli api data ml lib wasm app framework extension mobile"
            COMPREPLY=( $(compgen -W "${templates}" -- "${cur}") )
            return 0
            ;;
        # Cursor integration completions
        "cursor:open")
            # Complete with directory names
            COMPREPLY=( $(compgen -d -- "${cur}") )
            return 0
            ;;
        "cursor:new")
            # Complete with project types
            local project_types="web api mobile data ml cli lib"
            COMPREPLY=( $(compgen -W "${project_types}" -- "${cur}") )
            return 0
            ;;
        "cursor:switch")
            # Complete with recent projects and common project directories
            local projects=""
            # Add recent projects from Cursor workspace storage
            if [ -d "$HOME/.cursor/User/workspaceStorage" ]; then
                projects=$(find "$HOME/.cursor/User/workspaceStorage" -name "*.json" -exec basename {} \; 2>/dev/null | sed 's/\.json$//')
            fi
            # Add common project directories
            if [ -d "$HOME/projects" ]; then
                projects="$projects $(ls "$HOME/projects" 2>/dev/null)"
            fi
            if [ -d "$HOME/work" ]; then
                projects="$projects $(ls "$HOME/work" 2>/dev/null)"
            fi
            COMPREPLY=( $(compgen -W "${projects}" -- "${cur}") )
            return 0
            ;;
        "cursor:ai:explain"|"cursor:ai:refactor"|"cursor:ai:test"|"cursor:ai:docs"|"cursor:ai:review")
            # Complete with file names
            COMPREPLY=( $(compgen -f -- "${cur}") )
            return 0
            ;;
        "cursor:ext:install")
            # Complete with common extension IDs
            local common_extensions="ms-python.python ms-python.pylint ms-python.black-formatter rust-lang.rust-analyzer ms-vscode.vscode-typescript-next esbenp.prettier-vscode ms-vscode.vscode-eslint ms-vscode.vscode-json redhat.vscode-yaml ms-vscode.vscode-markdown"
            COMPREPLY=( $(compgen -W "${common_extensions}" -- "${cur}") )
            return 0
            ;;
        "cursor:ext:recommend")
            # Complete with project types
            local project_types="python rust javascript typescript web mobile data ml"
            COMPREPLY=( $(compgen -W "${project_types}" -- "${cur}") )
            return 0
            ;;
        "cursor:config:restore")
            # Complete with backup directories
            if [ -d "$HOME/.cursor-backups" ]; then
                local backups=$(ls "$HOME/.cursor-backups" 2>/dev/null)
                COMPREPLY=( $(compgen -W "${backups}" -- "${cur}") )
            fi
            return 0
            ;;
    esac
    
    # Handle multi-argument commands
    case "${COMP_WORDS[1]}" in
        "cursor:new")
            # First argument is project type, second is project name
            if [ ${COMP_CWORD} -eq 2 ]; then
                local project_types="web api mobile data ml cli lib"
                COMPREPLY=( $(compgen -W "${project_types}" -- "${cur}") )
                return 0
            elif [ ${COMP_CWORD} -eq 3 ]; then
                # Complete with directory names for project location
                COMPREPLY=( $(compgen -d -- "${cur}") )
                return 0
            fi
            ;;
        "cursor:ai:refactor")
            # First argument is file, second is refactor type
            if [ ${COMP_CWORD} -eq 2 ]; then
                COMPREPLY=( $(compgen -f -- "${cur}") )
                return 0
            elif [ ${COMP_CWORD} -eq 3 ]; then
                local refactor_types="general performance readability security structure"
                COMPREPLY=( $(compgen -W "${refactor_types}" -- "${cur}") )
                return 0
            fi
            ;;
        "cursor:ai:test")
            # First argument is file, second is test framework
            if [ ${COMP_CWORD} -eq 2 ]; then
                COMPREPLY=( $(compgen -f -- "${cur}") )
                return 0
            elif [ ${COMP_CWORD} -eq 3 ]; then
                local test_frameworks="pytest unittest jest mocha rspec"
                COMPREPLY=( $(compgen -W "${test_frameworks}" -- "${cur}") )
                return 0
            fi
            ;;
        "cursor:ai:docs")
            # First argument is file, second is doc format
            if [ ${COMP_CWORD} -eq 2 ]; then
                COMPREPLY=( $(compgen -f -- "${cur}") )
                return 0
            elif [ ${COMP_CWORD} -eq 3 ]; then
                local doc_formats="markdown sphinx javadoc godoc rustdoc"
                COMPREPLY=( $(compgen -W "${doc_formats}" -- "${cur}") )
                return 0
            fi
            ;;
        "cursor:ai:review")
            # First argument is file, second is review focus
            if [ ${COMP_CWORD} -eq 2 ]; then
                COMPREPLY=( $(compgen -f -- "${cur}") )
                return 0
            elif [ ${COMP_CWORD} -eq 3 ]; then
                local review_focus="general security performance style bugs best-practices"
                COMPREPLY=( $(compgen -W "${review_focus}" -- "${cur}") )
                return 0
            fi
            ;;
    esac
    
    return 0
}

# Clear any existing completion for caddie and register our completion function
complete -r caddie 2>/dev/null || true
complete -F _caddie_completion caddie

# Export the caddie function so it's available in subshells
export -f caddie
export -f caddie_set_home
export -f caddie_get_home
export -f caddie_reset_home
export -f caddie_help
export -f caddie_version
export -f _caddie_completion
