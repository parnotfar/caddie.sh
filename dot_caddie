#!/bin/bash

# Function to display caddie help
function caddie_help() {
    caddie_debug "=== caddie_help function called ==="
    
    echo "Caddie.sh - Development Environment Manager"
    echo "=========================================="
    echo ""
    echo "Usage: caddie <command>"
    echo ""
    echo "Command Categories:"
    echo "  home                     Home directory management"
    echo "  aliases                  Alias search and management"
    
    echo "Available modules:"
    for m in $(caddie_modules_get); do
        description_function="caddie_${m}_description"
        printf "  %-10s %s\n" "$m" "$(eval "$description_function")"
    done
    
    echo
    echo "General Commands:"
    echo "  help                     Show this overview"
    echo "  version                  Show caddie version"
    echo
    echo "Productivity:"
    echo "  core:aliases             Show all available aliases"
    echo
    echo "Detailed Help:"
    echo "  Use 'caddie <module>:help' for detailed information on any module"
    echo
}

# Function to show caddie version
function caddie_version() {
    if [ -f "$HOME/.caddie_version" ]; then
        source "$HOME/.caddie_version"
        echo "Caddie.sh version: $CADDIE_SH_VERSION"
    else
        echo "Caddie.sh version: unknown"
    fi
}

# Main caddie function - directly executes commands
function caddie() {
    local command="$1"

    shift  # Remove first argument (the command)

    caddie_debug "=== caddie function called ==="
    caddie_debug "command='$command'"
    caddie_debug "remaining args='$*'"
    
    # Handle built-in commands first
    case "$command" in
        "help"|"--help"|"-h")
            caddie_help
            return 0
            ;;
        "version"|"--version"|"-v")
            caddie_version
            return 0
            ;;
        "")
            caddie_help
            return 0
            ;;
    esac
    
    # Use naming convention: module:command -> caddie_module_command
    local function_name="caddie_${command//:/_}"
    
    if command -v "$function_name" >/dev/null 2>&1; then
        caddie_debug "Found function '$function_name', executing with args: $*"
        eval "$function_name \"\$@\""
    else
        echo "Error: Unknown command '$command'"
        caddie_help
        return 1
    fi
}

# --- completion setup ---
# 1) make ':' not break words (so ruby:add stays one token)
COMP_WORDBREAKS=${COMP_WORDBREAKS//:/}

_caddie_completion() {
  local cur prev words cword
  COMPREPLY=()

  # Prefer bash-completion helper if present; otherwise manual
  if declare -F _get_comp_words_by_ref >/dev/null 2>&1; then
    _get_comp_words_by_ref -n : cur prev words cword
  else
    words=("${COMP_WORDS[@]}")
    cword=${COMP_CWORD:-0}
    cur=${words[$cword]}
    prev=${words[$((cword-1))]}
  fi

  # Build a flat list of all accepted commands
  local base_opts="help version --help -h --version -v"
  local modules=()
  
  if command -v caddie_modules_get >/dev/null 2>&1; then
    # read safely into array; suppress module function's stdout noise
    IFS=$'\n' read -r -d '' -a modules < <(caddie_modules_get 2>/dev/null; printf '\0')
  fi
  
  # Add module-specific commands (these are the actual commands, not subcommands)
  local module_commands=""
  for module in "${modules[@]}"; do
    case "$module" in
      python)
        module_commands="$module_commands python:init python:install python:update python:venv:activate python:venv:deactivate python:build python:test python:run python:lint python:format python:pip:freeze python:pip:audit"
        ;;
      ruby)
        module_commands="$module_commands ruby:init ruby:bundle ruby:install ruby:update ruby:exec ruby:rake ruby:rspec ruby:rubocop"
        ;;
      js)
        module_commands="$module_commands js:init js:install js:add js:update js:build js:dev js:start js:test js:lint js:format js:audit"
        ;;
      rust)
        module_commands="$module_commands rust:new rust:build rust:run rust:test rust:add rust:remove rust:fmt rust:clippy rust:check rust:doc"
        ;;
      ios)
        module_commands="$module_commands ios:build ios:run ios:test ios:archive ios:pods:install ios:swift:version"
        ;;
      core)
        module_commands="$module_commands core:status core:set:home core:set:app core:get:app core:go:home core:help core:aliases core:alias:grep core:alias:git core:alias:docker core:alias:npm core:alias:nav"
        ;;
      cursor)
        module_commands="$module_commands cursor:open cursor:new cursor:switch cursor:ai:explain cursor:ai:refactor cursor:ai:test cursor:ai:docs cursor:ai:review cursor:ext:install cursor:ext:recommend cursor:config:restore"
        ;;
      cross)
        module_commands="$module_commands cross:template:create"
        ;;
      git)
        module_commands="$module_commands git:status git:branch git:commit git:push git:pull"
        ;;
    esac
  done
  
  local all_opts="$base_opts $module_commands"
  
  # Complete with all available commands
  IFS=$'\n' mapfile -t COMPREPLY < <(compgen -W "$all_opts" -- "$cur")
  
  return 0
}

# Helper function to extract module name from filename
function caddie_extract_module_name() {
    local filename="$1"
    basename "$filename" | sed 's/^\.caddie_//'
}

# Export the caddie function and helper functions so they're available in subshells
export -f caddie
export -f caddie_help
export -f caddie_version

# Source the dependent files
source "$HOME/.caddie_version"
source "$HOME/.caddie_prompt.sh"
source "$HOME/.caddie_debug"

# Source data structure files
source "$HOME/.caddie_data/.caddie_modules"

# Auto-discover caddie modules from ~/.caddie_modules/ directory
# Each module file should have functions named <module>_caddie_description and <module>_caddie_help
CADDIE_MODULES_DIR="$HOME/.caddie_modules"

# Load all modules 
if [ -d "$CADDIE_MODULES_DIR" ]; then
    caddie_debug "=== Starting module loading process ==="
    caddie_debug "CADDIE_MODULES_DIR: $CADDIE_MODULES_DIR"

    # Reset modules array before loading
    caddie_modules_reset

    # Load all modules and populate modules array
    while IFS= read -r -d '' file; do
        source "$file"
        caddie_modules_append "$(caddie_extract_module_name "$file")"
    done < <(find "$CADDIE_MODULES_DIR" -name ".caddie_*" -type f -print0 2>/dev/null)
    
    caddie_debug "=== Module loading complete ==="
    caddie_debug "Final modules array contents: [$(caddie_modules_get)]"
else
    echo "Installation Error: The modules directory for caddie is not found.  Please reinstall caddie."
    return 1
fi

# Set up tab completion
if command -v complete >/dev/null 2>&1; then
    # Clear any existing completion for caddie and register our completion function
    complete -r caddie 2>/dev/null || true
    complete -o default -F _caddie_completion caddie
    
    # Configure completion behavior
    bind 'set show-all-if-ambiguous off' 2>/dev/null || true
    bind 'set show-all-if-unmodified off' 2>/dev/null || true
    bind 'set completion-ignore-case off' 2>/dev/null || true
    
    echo "✓ Tab completion enabled"
else
    echo "⚠ Tab completion not available"
fi

# Caddie is now ready to use!
echo "✓ Caddie.sh loaded successfully"