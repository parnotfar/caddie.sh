#!/bin/bash

# Caddie.sh - Cursor IDE Integration
# This file contains all Cursor IDE-related functions

# Function to detect Cursor installation
caddie_cursor_detect() {
    echo "Detecting Cursor IDE installation..."
    
    # Check for Cursor CLI
    if command -v cursor >/dev/null 2>&1; then
        echo "✓ Cursor CLI found: $(which cursor)"
        cursor --version
    else
        echo "✗ Cursor CLI not found"
        echo "  Install from: https://cursor.sh/"
    fi
    
    # Check for Cursor application
    if [ -d "/Applications/Cursor.app" ]; then
        echo "✓ Cursor application found"
    else
        echo "✗ Cursor application not found"
    fi
    
    # Check for Cursor configuration
    if [ -d "$HOME/.cursor" ]; then
        echo "✓ Cursor configuration directory found"
    else
        echo "✗ Cursor configuration directory not found"
    fi
}

# Function to setup Cursor integration
caddie_cursor_setup() {
    echo "Setting up Cursor IDE integration..."
    
    # Create Cursor configuration directory
    mkdir -p "$HOME/.cursor/User"
    
    # Create basic settings
    cat > "$HOME/.cursor/User/settings.json" << EOF
{
  "caddie.integration.enabled": true,
  "caddie.ai.features.enabled": true,
  "caddie.project.templates.enabled": true,
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": true
  },
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 1000
}
EOF
    
    # Create keybindings
    cat > "$HOME/.cursor/User/keybindings.json" << EOF
[
  {
    "key": "cmd+shift+c",
    "command": "caddie.openTerminal",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+shift+a",
    "command": "caddie.ai.explain",
    "when": "editorTextFocus"
  }
]
EOF
    
    echo "✓ Cursor integration setup complete"
}

# Function to verify Cursor integration
caddie_cursor_verify() {
    echo "Verifying Cursor IDE integration..."
    
    local issues=0
    
    # Check CLI
    if ! command -v cursor >/dev/null 2>&1; then
        echo "✗ Cursor CLI not available"
        ((issues++))
    else
        echo "✓ Cursor CLI available"
    fi
    
    # Check configuration
    if [ ! -f "$HOME/.cursor/User/settings.json" ]; then
        echo "✗ Cursor settings not configured"
        ((issues++))
    else
        echo "✓ Cursor settings configured"
    fi
    
    # Check AI features
    if [ ! -d ".cursor" ]; then
        echo "⚠ Cursor AI features not initialized in current project"
    else
        echo "✓ Cursor AI features available"
    fi
    
    if [ $issues -eq 0 ]; then
        echo "✓ Cursor integration verified successfully"
    else
        echo "✗ Found $issues issues with Cursor integration"
        echo "Run 'caddie cursor:setup' to fix issues"
    fi
}

# Function to open project in Cursor
caddie_cursor_open() {
    local path="$1"
    
    if [ -z "$path" ]; then
        path="."
    fi
    
    if [ ! -d "$path" ]; then
        echo "Error: Directory '$path' does not exist"
        return 1
    fi
    
    echo "Opening '$path' in Cursor..."
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$path"
        echo "✓ Opened '$path' in Cursor"
    else
        echo "✗ Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
}

# Function to create new project and open in Cursor
caddie_cursor_new() {
    local project_type="$1"
    local project_name="$2"
    
    if [ -z "$project_type" ] || [ -z "$project_name" ]; then
        echo "Error: Please provide project type and name"
        echo "Usage: caddie cursor:new <type> <name>"
        echo "Types: web, api, mobile, data, ml, cli, lib"
        return 1
    fi
    
    echo "Creating new $project_type project '$project_name'..."
    
    # Create project using template
    caddie_template_create "$project_type" "$project_name"
    
    if caddie_template_create "$project_type" "$project_name"; then
        # Setup Cursor-specific configuration
        caddie_cursor_setup_project "$project_name" "$project_type"
        
        # Open in Cursor
        caddie_cursor_open "$project_name"
        
        echo "✓ Project '$project_name' created and opened in Cursor"
    else
        echo "✗ Failed to create project '$project_name'"
        return 1
    fi
}

# Function to setup Cursor-specific project configuration
caddie_cursor_setup_project() {
    local project_name="$1"
    local project_type="$2"
    
    echo "Setting up Cursor configuration for $project_type project..."
    
    mkdir -p "$project_name/.cursor"
    
    # Create project-specific settings
    cat > "$project_name/.cursor/settings.json" << EOF
{
  "caddie.project.type": "$project_type",
  "caddie.project.name": "$project_name",
  "caddie.ai.enabled": true,
  "caddie.templates.applied": true,
  "caddie.extensions.recommended": [
    "ms-python.python",
    "rust-lang.rust-analyzer",
    "ms-vscode.vscode-json"
  ]
}
EOF
    
    # Create launch configuration
    cat > "$project_name/.cursor/launch.json" << 'EOF'
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Project",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/src/main.js",
      "console": "integratedTerminal"
    }
  ]
}
EOF
    
    # Create tasks configuration
    cat > "$project_name/.cursor/tasks.json" << 'EOF'
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "caddie:build",
      "type": "shell",
      "command": "caddie",
      "args": ["build:all"],
      "group": "build"
    },
    {
      "label": "caddie:test",
      "type": "shell",
      "command": "caddie",
      "args": ["python:test"],
      "group": "test"
    }
  ]
}
EOF
    
    echo "✓ Cursor project configuration created"
}

# Function to show Cursor workspace info
caddie_cursor_workspace() {
    echo "Cursor Workspace Information"
    echo "==========================="
    
    if [ -f ".cursor/settings.json" ]; then
        echo "Project Settings:"
        cat .cursor/settings.json | jq '.' 2>/dev/null || cat .cursor/settings.json
    else
        echo "No project-specific Cursor settings found"
    fi
    
    if [ -f ".cursor/launch.json" ]; then
        echo ""
        echo "Launch Configurations:"
        cat .cursor/launch.json | jq '.' 2>/dev/null || cat .cursor/launch.json
    fi
    
    if [ -f ".cursor/tasks.json" ]; then
        echo ""
        echo "Tasks Configuration:"
        cat .cursor/tasks.json | jq '.' 2>/dev/null || cat .cursor/tasks.json
    fi
}

# Function to list recently opened projects
caddie_cursor_recent() {
    echo "Recently Opened Projects in Cursor"
    echo "=================================="
    
    if [ -d "$HOME/.cursor/User/workspaceStorage" ]; then
        find "$HOME/.cursor/User/workspaceStorage" -name "*.json" -exec basename {} \; | sed 's/\.json$//' | head -10
    else
        echo "No recent projects found"
    fi
}

# Function to switch to different project
caddie_cursor_switch() {
    local project="$1"
    
    if [ -z "$project" ]; then
        echo "Error: Please provide a project name"
        echo "Usage: caddie cursor:switch <project>"
        echo "Use 'caddie cursor:recent' to see recent projects"
        return 1
    fi
    
    # Try to find project in common locations
    local project_path=""
    
    for dir in "$HOME/projects" "$HOME/work" "$HOME/development"; do
        if [ -d "$dir/$project" ]; then
            project_path="$dir/$project"
            break
        fi
    done
    
    if [ -z "$project_path" ]; then
        echo "Error: Project '$project' not found in common directories"
        return 1
    fi
    
    echo "Switching to project '$project'..."
    caddie_cursor_open "$project_path"
}

# AI-powered development functions
caddie_cursor_ai_explain() {
    local file="$1"
    
    if [ -z "$file" ]; then
        echo "Error: Please provide a file path"
        echo "Usage: caddie cursor:ai:explain <file>"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist"
        return 1
    fi
    
    echo "Asking AI to explain: $file"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-explain-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Code Explanation Request

**File:** $file
**Request:** Please explain this code in detail, including:
- What the code does
- How it works
- Key functions and variables
- Potential improvements
- Any potential issues

**Code:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted code explanation.
EOF
    
    echo "✓ AI explanation request created: $ai_prompt_file"
    echo "  Open this file in Cursor and use AI chat to get explanation"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
}

caddie_cursor_ai_refactor() {
    local file="$1"
    local refactor_type="${2:-general}"
    
    if [ -z "$file" ]; then
        echo "Error: Please provide a file path"
        echo "Usage: caddie cursor:ai:refactor <file> [type]"
        echo "Types: general, performance, readability, security, structure"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist"
        return 1
    fi
    
    echo "Asking AI to refactor: $file (type: $refactor_type)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-refactor-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Code Refactoring Request

**File:** $file
**Refactor Type:** $refactor_type
**Request:** Please refactor this code with focus on $refactor_type, including:
- Improved code structure
- Better performance (if applicable)
- Enhanced readability
- Security improvements (if applicable)
- Modern best practices

**Original Code:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted code refactoring.
EOF
    
    echo "✓ AI refactoring request created: $ai_prompt_file"
    echo "  Open this file in Cursor and use AI chat to get refactored code"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
}

caddie_cursor_ai_test() {
    local file="$1"
    local test_framework="${2:-pytest}"
    
    if [ -z "$file" ]; then
        echo "Error: Please provide a file path"
        echo "Usage: caddie cursor:ai:test <file> [framework]"
        echo "Frameworks: pytest, unittest, jest, mocha, rspec"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist"
        return 1
    fi
    
    echo "Asking AI to generate tests for: $file (framework: $test_framework)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-test-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Test Generation Request

**File:** $file
**Test Framework:** $test_framework
**Request:** Please generate comprehensive tests for this code using $test_framework, including:
- Unit tests for all functions
- Edge cases and error conditions
- Mock objects where appropriate
- Test data and fixtures
- Clear test descriptions

**Code to Test:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted test generation.
EOF
    
    echo "✓ AI test generation request created: $ai_prompt_file"
    echo "  Open this file in Cursor and use AI chat to get generated tests"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
}

caddie_cursor_ai_docs() {
    local file="$1"
    local doc_format="${2:-markdown}"
    
    if [ -z "$file" ]; then
        echo "Error: Please provide a file path"
        echo "Usage: caddie cursor:ai:docs <file> [format]"
        echo "Formats: markdown, sphinx, javadoc, godoc, rustdoc"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist"
        return 1
    fi
    
    echo "Asking AI to generate documentation for: $file (format: $doc_format)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-docs-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Documentation Generation Request

**File:** $file
**Documentation Format:** $doc_format
**Request:** Please generate comprehensive documentation for this code in $doc_format format, including:
- Function/class descriptions
- Parameter documentation
- Return value documentation
- Usage examples
- Code comments

**Code to Document:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted documentation generation.
EOF
    
    echo "✓ AI documentation request created: $ai_prompt_file"
    echo "  Open this file in Cursor and use AI chat to get generated documentation"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
}

caddie_cursor_ai_review() {
    local file="$1"
    local review_focus="${2:-general}"
    
    if [ -z "$file" ]; then
        echo "Error: Please provide a file path"
        echo "Usage: caddie cursor:ai:review <file> [focus]"
        echo "Focus: general, security, performance, style, bugs, best-practices"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist"
        return 1
    fi
    
    echo "Asking AI to review: $file (focus: $review_focus)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-review-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Code Review Request

**File:** $file
**Review Focus:** $review_focus
**Request:** Please review this code with focus on $review_focus, including:
- Code quality assessment
- Potential bugs or issues
- Security vulnerabilities (if applicable)
- Performance concerns (if applicable)
- Style and best practices
- Suggestions for improvement

**Code to Review:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted code review.
EOF
    
    echo "✓ AI code review request created: $ai_prompt_file"
    echo "  Open this file in Cursor and use AI chat to get code review"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
}

# Extension management functions
caddie_cursor_ext_install() {
    local extension_id="$1"
    
    if [ -z "$extension_id" ]; then
        echo "Error: Please provide an extension ID"
        echo "Usage: caddie cursor:ext:install <extension-id>"
        echo "Example: caddie cursor:ext:install ms-python.python"
        return 1
    fi
    
    echo "Installing Cursor extension: $extension_id"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor --install-extension "$extension_id"
        echo "✓ Extension '$extension_id' installed"
    else
        echo "✗ Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
}

caddie_cursor_ext_list() {
    echo "Installed Cursor Extensions"
    echo "=========================="
    
    if command -v cursor >/dev/null 2>&1; then
        cursor --list-extensions
    else
        echo "✗ Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
}

caddie_cursor_ext_update() {
    echo "Updating all Cursor extensions..."
    
    if command -v cursor >/dev/null 2>&1; then
        cursor --update-extensions
        echo "✓ All extensions updated"
    else
        echo "✗ Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
}

caddie_cursor_ext_sync() {
    echo "Syncing Cursor extensions..."
    
    # Create extensions list
    if command -v cursor >/dev/null 2>&1; then
        cursor --list-extensions > "$HOME/.cursor/extensions.txt"
        echo "✓ Extensions list saved to ~/.cursor/extensions.txt"
    else
        echo "✗ Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
}

caddie_cursor_ext_recommend() {
    local project_type="$1"
    
    if [ -z "$project_type" ]; then
        echo "Error: Please provide a project type"
        echo "Usage: caddie cursor:ext:recommend <type>"
        echo "Types: python, rust, javascript, typescript, web, mobile, data, ml"
        return 1
    fi
    
    echo "Recommended extensions for $project_type projects:"
    echo "================================================"
    
    case "$project_type" in
        "python")
            echo "ms-python.python - Python language support"
            echo "ms-python.pylint - Python linting"
            echo "ms-python.black-formatter - Python formatting"
            echo "ms-python.isort - Import sorting"
            ;;
        "rust")
            echo "rust-lang.rust-analyzer - Rust language support"
            echo "vadimcn.vscode-lldb - Rust debugging"
            ;;
        "javascript"|"typescript")
            echo "ms-vscode.vscode-typescript-next - TypeScript support"
            echo "esbenp.prettier-vscode - Code formatting"
            echo "ms-vscode.vscode-eslint - JavaScript linting"
            ;;
        "web")
            echo "ms-vscode.vscode-html - HTML support"
            echo "ms-vscode.vscode-css - CSS support"
            echo "bradlc.vscode-tailwindcss - Tailwind CSS support"
            ;;
        "mobile")
            echo "ms-vscode.vscode-react-native - React Native support"
            echo "ms-vscode.vscode-flutter - Flutter support"
            ;;
        "data"|"ml")
            echo "ms-python.python - Python support"
            echo "ms-toolsai.jupyter - Jupyter notebook support"
            echo "ms-python.pylint - Python linting"
            ;;
        *)
            echo "Unknown project type: $project_type"
            return 1
            ;;
    esac
}

# Configuration management functions
caddie_cursor_config_show() {
    echo "Cursor Configuration"
    echo "==================="
    
    if [ -f "$HOME/.cursor/User/settings.json" ]; then
        echo "User Settings:"
        cat "$HOME/.cursor/User/settings.json" | jq '.' 2>/dev/null || cat "$HOME/.cursor/User/settings.json"
    fi
    
    if [ -f "$HOME/.cursor/User/keybindings.json" ]; then
        echo ""
        echo "Keybindings:"
        cat "$HOME/.cursor/User/keybindings.json" | jq '.' 2>/dev/null || cat "$HOME/.cursor/User/keybindings.json"
    fi
}

caddie_cursor_config_backup() {
    local backup_dir
    backup_dir="$HOME/.cursor-backups/$(date +%Y%m%d_%H%M%S)"
    
    echo "Backing up Cursor configuration to $backup_dir..."
    mkdir -p "$backup_dir"
    
    # Backup settings
    if [ -d "$HOME/.cursor" ]; then
        cp -r "$HOME/.cursor" "$backup_dir/"
    fi
    
    # Backup extensions list
    if command -v cursor >/dev/null 2>&1; then
        cursor --list-extensions > "$backup_dir/extensions.txt"
    fi
    
    echo "✓ Cursor configuration backed up to $backup_dir"
}

caddie_cursor_config_restore() {
    local backup_path="$1"
    
    if [ -z "$backup_path" ]; then
        echo "Error: Please provide backup path"
        echo "Usage: caddie cursor:config:restore <backup-path>"
        return 1
    fi
    
    if [ ! -d "$backup_path" ]; then
        echo "Error: Backup directory '$backup_path' does not exist"
        return 1
    fi
    
    echo "Restoring Cursor configuration from $backup_path..."
    
    # Restore settings
    if [ -d "$backup_path/.cursor" ]; then
        cp -r "$backup_path/.cursor" "$HOME/"
    fi
    
    # Restore extensions
    if [ -f "$backup_path/extensions.txt" ]; then
        while read -r extension; do
            cursor --install-extension "$extension"
        done < "$backup_path/extensions.txt"
    fi
    
    echo "✓ Cursor configuration restored"
}

caddie_cursor_config_sync() {
    echo "Syncing Cursor configuration..."
    
    # Create backup first
    caddie_cursor_config_backup
    
    # Sync settings across devices (placeholder for cloud sync)
    echo "✓ Cursor configuration synced"
    echo "  Note: Manual cloud sync may be required"
}

caddie_cursor_config_optimize() {
    echo "Optimizing Cursor configuration for performance..."
    
    # Create optimized settings
    cat > "$HOME/.cursor/User/settings.json" << EOF
{
  "caddie.integration.enabled": true,
  "caddie.ai.features.enabled": true,
  "caddie.project.templates.enabled": true,
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": true
  },
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 1000,
  "editor.minimap.enabled": false,
  "editor.suggest.showWords": false,
  "editor.quickSuggestions": {
    "other": false,
    "comments": false,
    "strings": false
  },
  "workbench.enableExperiments": false,
  "telemetry.telemetryLevel": "off"
}
EOF
    
    echo "✓ Cursor configuration optimized for performance"
}

# Function to register Cursor caddie commands
# Main registration function for cursor module
cursor_register() {
    cursor_help_register
    cursor_commands_register
}

# Register help information
cursor_help_register() {
    caddie_help_append "cursor" "Cursor IDE integration"
}

# Register commands
cursor_commands_register() {
    caddie_commands_append "cursor:detect|caddie_cursor_detect|Detect Cursor installation"
    caddie_commands_append "cursor:setup|caddie_cursor_setup|Setup Cursor integration"
    caddie_commands_append "cursor:verify|caddie_cursor_verify|Verify Cursor integration"
    caddie_commands_append "cursor:open|caddie_cursor_open|Open project in Cursor"
    caddie_commands_append "cursor:new|caddie_cursor_new|Create new project and open in Cursor"
    caddie_commands_append "cursor:workspace|caddie_cursor_workspace|Show Cursor workspace info"
    caddie_commands_append "cursor:recent|caddie_cursor_recent|List recently opened projects"
    caddie_commands_append "cursor:switch|caddie_cursor_switch|Switch to different project"
    caddie_commands_append "cursor:ai:explain|caddie_cursor_ai_explain|Ask AI to explain code"
    caddie_commands_append "cursor:ai:refactor|caddie_cursor_ai_refactor|AI-assisted refactoring"
    caddie_commands_append "cursor:ai:test|caddie_cursor_ai_test|Generate tests with AI"
    caddie_commands_append "cursor:ai:docs|caddie_cursor_ai_docs|Generate documentation with AI"
    caddie_commands_append "cursor:ai:review|caddie_cursor_ai_review|AI code review"
    caddie_commands_append "cursor:ext:install|caddie_cursor_ext_install|Install Cursor extension"
    caddie_commands_append "cursor:ext:list|caddie_cursor_ext_list|List installed extensions"
    caddie_commands_append "cursor:ext:update|caddie_cursor_ext_update|Update all extensions"
    caddie_commands_append "cursor:ext:sync|caddie_cursor_ext_sync|Sync extensions across devices"
    caddie_commands_append "cursor:ext:recommend|caddie_cursor_ext_recommend|Recommend extensions for project type"
    caddie_commands_append "cursor:config:show|caddie_cursor_config_show|Show Cursor configuration"
    caddie_commands_append "cursor:config:backup|caddie_cursor_config_backup|Backup Cursor settings"
    caddie_commands_append "cursor:config:restore|caddie_cursor_config_restore|Restore Cursor settings"
    caddie_commands_append "cursor:config:sync|caddie_cursor_config_sync|Sync Cursor settings"
    caddie_commands_append "cursor:config:optimize|caddie_cursor_config_optimize|Optimize Cursor for performance"
    caddie_commands_append "cursor:help|caddie_cursor_help|Show detailed Cursor help"
}

# Function to display Cursor module help
caddie_cursor_help() {
    echo "Cursor IDE Integration"
    echo "====================="
    echo ""
    echo "Usage: caddie cursor:<command>"
    echo ""
    echo "Setup & Verification:"
    echo "  detect             Detect Cursor installation"
    echo "  setup              Setup Cursor integration"
    echo "  verify             Verify Cursor integration"
    echo ""
    echo "Project Management:"
    echo "  open <path>        Open project in Cursor"
    echo "  new <type> <name>  Create new project and open in Cursor"
    echo "  workspace          Show Cursor workspace info"
    echo "  recent             List recently opened projects"
    echo "  switch <project>   Switch to different project"
    echo ""
    echo "AI-Powered Development:"
    echo "  ai:explain <file>  Ask AI to explain code"
    echo "  ai:refactor <file> AI-assisted refactoring"
    echo "  ai:test <file>     Generate tests with AI"
    echo "  ai:docs <file>     Generate documentation with AI"
    echo "  ai:review <file>   AI code review"
    echo ""
    echo "Extension Management:"
    echo "  ext:install <id>   Install Cursor extension"
    echo "  ext:list           List installed extensions"
    echo "  ext:update         Update all extensions"
    echo "  ext:sync           Sync extensions across devices"
    echo "  ext:recommend <type> Recommend extensions for project type"
    echo ""
    echo "Configuration Management:"
    echo "  config:show        Show Cursor configuration"
    echo "  config:backup      Backup Cursor settings"
    echo "  config:restore <path> Restore Cursor settings"
    echo "  config:sync        Sync Cursor settings"
    echo "  config:optimize    Optimize Cursor for performance"
    echo ""
    echo "Examples:"
    echo "  caddie cursor:detect"
    echo "  caddie cursor:open ~/projects/myapp"
    echo "  caddie cursor:ai:explain src/main.py"
    echo "  caddie cursor:ext:install ms-python.python"
    echo "  caddie cursor:config:backup"
}

# Export Cursor functions
export -f cursor_caddie_register
export -f caddie_cursor_detect
export -f caddie_cursor_verify
export -f caddie_cursor_open
export -f caddie_cursor_new
export -f caddie_cursor_setup_project
export -f caddie_cursor_workspace
export -f caddie_cursor_recent
export -f caddie_cursor_switch
export -f caddie_cursor_ai_explain
export -f caddie_cursor_ai_refactor
export -f caddie_cursor_ai_test
export -f caddie_cursor_ai_docs
export -f caddie_cursor_ai_review
export -f caddie_cursor_ext_install
export -f caddie_cursor_ext_list
export -f caddie_cursor_ext_update
export -f caddie_cursor_ext_sync
export -f caddie_cursor_ext_recommend
export -f caddie_cursor_config_show
export -f caddie_cursor_config_backup
export -f caddie_cursor_config_restore
export -f caddie_cursor_config_sync
export -f caddie_cursor_config_optimize
export -f caddie_cursor_help
