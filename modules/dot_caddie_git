#!/bin/bash

# Caddie.sh - Git Prompt and Custom File Management
# This file handles git prompt setup and custom file sourcing

source "$HOME/.caddie_modules/.caddie_cli"

# Function to source custom files
caddie_source_custom_files() {
    # Source custom bash profile additions
    if [ -f "$HOME/.bash_profile-caddie-custom" ]; then
        source "$HOME/.bash_profile-caddie-custom"
    fi
    
    # Source custom bashrc additions
    if [ -f "$HOME/.bashrc-caddie-custom" ]; then
        source "$HOME/.bashrc-caddie-custom"
    fi

    return 0
}

# Set product name
export PRODUCT_NAME="Caddie"

# Source and set up our prompt
source ~/.caddie_prompt.sh
set_caddie_prompt

# Auto-setup when sourced
caddie_source_custom_files

# Git workflow functions
function caddie_git_status() {
    echo "Git Status:"
    git status --short
    return 0
}

function caddie_git_branch() {
    echo "Current branch: $(git branch --show-current)"
    echo "All branches:"
    git branch -a
    return 0
}

function caddie_git_commit() {
    local message="$1"
    if [ -z "$message" ]; then
        caddie cli:red "Error: Please provide a commit message"
        echo "Usage: caddie git:commit <message>"
        return 1
    fi
    git add .
    git commit -m "$message"
    return 0
}

function caddie_git_push() {
    git push
    return 0
}

function caddie_git_push_set_upstream() {
    local remote="${1:-origin}"
    local branch="${2:-main}"
    
    echo "Setting upstream for branch '${branch}' to '${remote}/${branch}'"
    git push --set-upstream "${remote}" "${branch}"
    return 0
}

function caddie_git_pull() {
    git pull
    return 0
}

function caddie_git_gacp() {
    local message="$1"
    if [ -z "$message" ]; then
        caddie cli:red "Error: Please provide a commit message"
        echo "Usage: caddie git:gacp <message>"
        return 1
    fi
    
    echo "Adding all changes..."
    git add .
    
    echo "Committing with message: '${message}'"
    git commit -m "$message"
    
    echo "Pushing to remote..."
    git push
    return 0
}

function caddie_git_remote_add() {
    local name="$1"
    local url="$2"
    
    # If no arguments provided, auto-detect repository and use stored GitHub account
    if [ -z "${name}" ] && [ -z "${url}" ]; then
        local github_account=$(caddie_github_account_get)
        if [ -z "${github_account}" ]; then
            caddie cli:red "Error: No GitHub account set. Use 'caddie github:account:set <account>' first"
            echo "Or provide manual arguments: caddie git:remote:add <name> <url>"
            return 1
        fi
        
        # Auto-detect repository name from current directory
        local repo_name=$(basename "$(pwd)")
        local name="origin"
        local url="git@github.com:${github_account}/${repo_name}.git"
        
        echo "Auto-detected repository: ${repo_name}"
        echo "Using GitHub account: ${github_account}"
        echo "Adding remote '${name}' pointing to '${url}'"
    elif [ -z "${name}" ] || [ -z "${url}" ]; then
        caddie cli:red "Error: Please provide both remote name and URL"
        echo "Usage: caddie git:remote:add <name> <url>"
        echo "Or use auto-detection: caddie git:remote:add"
        return 1
    fi
    
    git remote add "${name}" "${url}"
    echo "Added remote '${name}' pointing to '${url}'"
    return 0
}

function caddie_git_remote_set_url() {
    local name="$1"
    local url="$2"
    if [ -z "$name" ] || [ -z "$url" ]; then
        caddie cli:red "Error: Please provide remote name and URL"
        echo "Usage: caddie git:remote:set-url <name> <url>"
        return 1
    fi
    git remote set-url "$name" "$url"
    echo "Set remote '$name' URL to '$url'"
    return 0
}

function caddie_git_remote_list() {
    echo "Remote repositories:"
    git remote -v
    return 0
}

function caddie_git_remote_remove() {
    local name="${1:-origin}"
    git remote remove "$name"
    echo "Removed remote '$name'"
    return 0
}

function caddie_git_clone() {
    local repo_name="$1"
    
    if [ -z "${repo_name}" ]; then
        caddie cli:red "Error: Please provide repository name"
        echo "Usage: caddie git:clone <repo-name>"
        echo "Example: caddie git:clone my-project"
        return 1
    fi
    
    local github_account=$(caddie_github_account_get)
    if [ -z "${github_account}" ]; then
        caddie cli:red "Error: No GitHub account set. Use 'caddie github:account:set <account>' first"
        return 1
    fi
    
    local url="git@github.com:${github_account}/${repo_name}.git"
    
    echo "Cloning repository: ${repo_name}"
    echo "Using GitHub account: ${github_account}"
    echo "URL: ${url}"
    
    git clone "${url}"
    return 0
}

function caddie_git_help() {
    caddie cli:title "Git Module Commands"
    caddie cli:blank
    
    caddie cli:usage "caddie git:<command>"
    caddie cli:blank
    
    caddie cli:title "Commands:"
    caddie cli:indent "status              Show git status"
    caddie cli:indent "branch              Show current and all branches"
    caddie cli:indent "commit <message>    Add all changes and commit with message"
    caddie cli:indent "gacp <message>      Add all changes, commit, and push in one command"
    caddie cli:indent "push               Push to remote repository"
    caddie cli:indent "push:set:upstream [<remote>] [<branch>]  Set upstream branch (defaults: origin, main)"
    caddie cli:indent "pull               Pull from remote repository"
    caddie cli:indent "clone <repo-name>  Clone repository using stored GitHub account"
    caddie cli:blank
    
    caddie cli:title "Remote Management:"
    caddie cli:indent "remote:add [<name> <url>]  Add remote (auto-detects if no args)"
    caddie cli:indent "remote:set-url <name> <url> Set remote URL"
    caddie cli:indent "remote:list                 List all remotes"
    caddie cli:indent "remote:remove [<name>]        Remove remote (defaults to origin)"
    caddie cli:blank
    
    caddie cli:title "Examples:"
    caddie cli:indent "caddie git:status"
    caddie cli:indent "caddie git:commit 'Add new feature'"
    caddie cli:indent "caddie git:gacp 'Quick commit and push'"
    caddie cli:indent "caddie git:remote:add"
    caddie cli:indent "caddie git:push"
    caddie cli:indent "caddie git:clone my-project"
    caddie cli:blank
    caddie cli:title "Setup GitHub Integration:"
    caddie cli:indent "caddie github:account:set <account>  Set GitHub account"
    caddie cli:indent "caddie git:remote:add                Auto-add remote"
    caddie cli:blank
    return 0
}

function caddie_git_description() {
    echo 'Git workflow enhancements'
    return 0
}

# Export functions for external use
export -f caddie_source_custom_files
export -f caddie_git_status
export -f caddie_git_branch
export -f caddie_git_commit
export -f caddie_git_gacp
export -f caddie_git_push
export -f caddie_git_push_set_upstream
export -f caddie_git_pull
export -f caddie_git_remote_add
export -f caddie_git_remote_set_url
export -f caddie_git_remote_list
export -f caddie_git_remote_remove
export -f caddie_git_clone
export -f caddie_git_help
export -f caddie_git_description