#!/bin/bash

# Caddie.sh - iOS Development
# This file contains all iOS-related functions

source "$HOME/.caddie_modules/.caddie_cli"

# Function to setup iOS development environment
function caddie_ios_setup() {
    caddie cli:title "Setting up iOS development environment..."
    
    # Check for Xcode
    if ! command -v xcodebuild >/dev/null 2>&1; then
        caddie cli:x "Xcode not found. Please install Xcode from the App Store"
        return 1
    fi
    
    # Check for Swift
    if ! command -v swift >/dev/null 2>&1; then
        caddie cli:x "Swift not found. Please install Xcode command line tools"
        caddie cli:thought "Run: xcode-select --install"
        return 1
    fi
    
    # Check for CocoaPods
    if ! command -v pod >/dev/null 2>&1; then
        caddie cli:title "Installing CocoaPods..."
        sudo gem install cocoapods
        caddie cli:check "CocoaPods installed successfully"
    fi
    
    caddie cli:check "iOS development environment setup complete"
    caddie cli:indent "Xcode: $(xcodebuild -version | head -n1)"
    caddie cli:indent "Swift: $(swift --version | head -n1)"
    caddie cli:indent "CocoaPods: $(pod --version)"
}

# Function to list available simulators
function caddie_ios_simulator() {
    caddie cli:title "Available iOS Simulators"
    caddie cli:blank
    xcrun simctl list devices
}

# Function to list connected devices
function caddie_ios_device() {
    caddie cli:title "Connected iOS Devices"
    caddie cli:blank
    xcrun devicectl list devices
}

# Function to build iOS project
function caddie_ios_build() {
    if [ ! -f ./*.xcodeproj ] && [ ! -f ./*.xcworkspace ]; then
        caddie cli:red "Error: Not in an iOS project directory (no .xcodeproj or .xcworkspace found)"
        return 1
    fi
    
    caddie cli:title "Building iOS project..."
    
    # Determine project type
    if [ -f ./*.xcworkspace ]; then
        caddie cli:indent "Building workspace..."
        xcodebuild -workspace ./*.xcworkspace -scheme * -configuration Debug build
    else
        caddie cli:indent "Building project..."
        xcodebuild -project ./*.xcodeproj -scheme * -configuration Debug build
    fi
    
    caddie cli:check "iOS project built successfully"
}

# Function to run iOS project
function caddie_ios_run() {
    if [ ! -f ./*.xcodeproj ] && [ ! -f ./*.xcworkspace ]; then
        caddie cli:red "Error: Not in an iOS project directory (no .xcodeproj or .xcworkspace found)"
        return 1
    fi
    
    caddie cli:title "Running iOS project..."
    
    # Get the first available simulator
    local simulator
    local simulator=$(xcrun simctl list devices | grep "iPhone" | head -n1 | sed 's/.*(\([^)]*\)).*/\1/')
    
    if [ -z "$simulator" ]; then
        caddie cli:red "Error: No iOS simulator found"
        return 1
    fi
    
    caddie cli:indent "Using simulator: $simulator"
    
    # Determine project type and run
    if [ -f ./*.xcworkspace ]; then
        xcodebuild -workspace ./*.xcworkspace -scheme * -destination "platform=iOS Simulator,name=$simulator" build
    else
        xcodebuild -project ./*.xcodeproj -scheme * -destination "platform=iOS Simulator,name=$simulator" build
    fi
    
    caddie cli:check "iOS project ran successfully on simulator"
}

# Function to run iOS tests
function caddie_ios_test() {
    if [ ! -f ./*.xcodeproj ] && [ ! -f ./*.xcworkspace ]; then
        caddie cli:red "Error: Not in an iOS project directory (no .xcodeproj or .xcworkspace found)"
        return 1
    fi
    
    caddie cli:title "Running iOS tests..."
    
    # Get the first available simulator
    local simulator
    local simulator=$(xcrun simctl list devices | grep "iPhone" | head -n1 | sed 's/.*(\([^)]*\)).*/\1/')
    
    if [ -z "$simulator" ]; then
        caddie cli:red "Error: No iOS simulator found"
        return 1
    fi
    
    caddie cli:indent "Using simulator: $simulator"
    
    # Determine project type and test
    if [ -f ./*.xcworkspace ]; then
        xcodebuild -workspace ./*.xcworkspace -scheme * -destination "platform=iOS Simulator,name=$simulator" test
    else
        xcodebuild -project ./*.xcodeproj -scheme * -destination "platform=iOS Simulator,name=$simulator" test
    fi
    
    if xcodebuild -workspace ./*.xcworkspace -scheme * -destination "platform=iOS Simulator,name=$simulator" test; then
        caddie cli:check "iOS tests completed successfully"
    else
        caddie cli:x "Some iOS tests failed"
        return 1
    fi
}

# Function to create iOS archive
function caddie_ios_archive() {
    if [ ! -f ./*.xcodeproj ] && [ ! -f ./*.xcworkspace ]; then
        caddie cli:red "Error: Not in an iOS project directory (no .xcodeproj or .xcworkspace found)"
        return 1
    fi
    
    caddie cli:title "Creating iOS archive..."
    
    # Create archive directory
    mkdir -p build/archive
    
    # Determine project type and archive
    if [ -f ./*.xcworkspace ]; then
        xcodebuild -workspace ./*.xcworkspace -scheme * -configuration Release -archivePath build/archive/App.xcarchive archive
    else
        xcodebuild -project ./*.xcodeproj -scheme * -configuration Release -archivePath build/archive/App.xcarchive archive
    fi
    
    caddie cli:check "iOS archive created successfully"
    caddie cli:indent "Location: build/archive/App.xcarchive"
}

# Function to clean iOS build artifacts
function caddie_ios_clean() {
    if [ ! -f ./*.xcodeproj ] && [ ! -f ./*.xcworkspace ]; then
        caddie cli:red "Error: Not in an iOS project directory (no .xcodeproj or .xcworkspace found)"
        return 1
    fi
    
    caddie cli:title "Cleaning iOS build artifacts..."
    
    # Determine project type and clean
    if [ -f ./*.xcworkspace ]; then
        xcodebuild -workspace ./*.xcworkspace -scheme * clean
    else
        xcodebuild -project ./*.xcodeproj -scheme * clean
    fi
    
    # Remove build directory
    rm -rf build/
    
    caddie cli:check "iOS build artifacts cleaned"
}

# Function to install CocoaPods dependencies
function caddie_ios_pod_install() {
    if [ ! -f "Podfile" ]; then
        caddie cli:red "Error: Podfile not found in current directory"
        return 1
    fi
    
    caddie cli:title "Installing CocoaPods dependencies..."
    pod install
    
    caddie cli:check "CocoaPods dependencies installed successfully"
    caddie cli:thought "Use the .xcworkspace file to open the project"
}

# Function to update CocoaPods dependencies
function caddie_ios_pod_update() {
    if [ ! -f "Podfile" ]; then
        caddie cli:red "Error: Podfile not found in current directory"
        return 1
    fi
    
    caddie cli:title "Updating CocoaPods dependencies..."
    pod update
    
    caddie cli:check "CocoaPods dependencies updated successfully"
}

# Function to show Swift version
function caddie_ios_swift_version() {
    if command -v swift >/dev/null 2>&1; then
        caddie cli:title "Swift Version"
        caddie cli:blank
        swift --version
    else
        caddie cli:x "Swift not found. Please install Xcode command line tools"
        caddie cli:thought "Run: xcode-select --install"
        return 1
    fi
}

# Function to show Xcode version
function caddie_ios_xcode_version() {
    if command -v xcodebuild >/dev/null 2>&1; then
        caddie cli:title "Xcode Version"
        caddie cli:blank
        xcodebuild -version
    else
        caddie cli:x "Xcode not found. Please install Xcode from the App Store"
        return 1
    fi
}

# Function to setup Rust development environment for iOS
function caddie_ios_rust_setup() {
    caddie cli:title "Setting up Rust development environment for iOS..."
    
    # Check if Rust is installed
    if ! command -v rustc &> /dev/null; then
        caddie cli:title "Installing Rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        source "$HOME/.cargo/env"
        caddie cli:check "Rust installed successfully"
    else
        caddie cli:check "Rust already installed: $(rustc --version)"
    fi
    
    # Add iOS-specific Rust targets
    caddie cli:title "Adding iOS Rust targets..."
    rustup target add aarch64-apple-ios x86_64-apple-ios 2>/dev/null || true
    caddie cli:check "iOS Rust targets added successfully"
    
    # Install essential Cargo tools
    caddie cli:title "Installing essential Cargo tools..."
    cargo install cargo-edit cargo-watch cargo-tarpaulin 2>/dev/null || true
    caddie cli:check "Cargo tools installed successfully"
    
    # Validate iOS development environment
    caddie cli:title "Validating iOS development environment..."
    
    if ! command -v xcodebuild >/dev/null 2>&1; then
        caddie cli:x "Xcode not found. Please install Xcode from the App Store"
        return 1
    fi
    
    if ! command -v swift >/dev/null 2>&1; then
        caddie cli:x "Swift not found. Please install Xcode command line tools"
        caddie cli:thought "Run: xcode-select --install"
        return 1
    fi
    
    caddie cli:check "iOS development environment validated"
    caddie cli:indent "Xcode: $(xcodebuild -version | head -n1)"
    caddie cli:indent "Swift: $(swift --version | head -n1)"
    caddie cli:indent "Rust: $(rustc --version)"
    
    caddie cli:check "Rust development environment for iOS setup complete"
    caddie cli:blank
    caddie cli:title "Next steps:"
    caddie cli:indent "1. Build Rust library: cargo build --target aarch64-apple-ios --release --lib"
    caddie cli:indent "2. Create iOS framework structure for Swift integration"
    caddie cli:indent "3. Use the generated .a static libraries in your iOS project"
}

# Function to display iOS module help
function caddie_ios_help() {
    caddie cli:title "iOS Development Tools"
    caddie cli:blank
    caddie cli:usage "caddie ios:<command>"
    caddie cli:blank
    caddie cli:title "Environment Setup:"
    caddie cli:indent "setup              Setup iOS development environment"
    caddie cli:indent "rust:setup         Setup Rust development environment for iOS"
    caddie cli:indent "simulator          List available simulators"
    caddie cli:indent "device             List connected devices"
    caddie cli:blank
    caddie cli:title "Project Management:"
    caddie cli:indent "build              Build iOS project"
    caddie cli:indent "run                Run on simulator/device"
    caddie cli:indent "test               Run iOS tests"
    caddie cli:indent "archive            Create archive for distribution"
    caddie cli:indent "clean              Clean build artifacts"
    caddie cli:blank
    caddie cli:title "Dependency Management:"
    caddie cli:indent "pod:install        Install CocoaPods dependencies"
    caddie cli:indent "pod:update         Update CocoaPods dependencies"
    caddie cli:blank
    caddie cli:title "Version Information:"
    caddie cli:indent "swift:version      Show Swift version"
    caddie cli:indent "xcode:version      Show Xcode version"
    caddie cli:blank
    caddie cli:title "Examples:"
    caddie cli:indent "caddie ios:setup"
    caddie cli:indent "caddie ios:rust:setup"
    caddie cli:indent "caddie ios:simulator"
    caddie cli:indent "caddie ios:build"
    caddie cli:indent "caddie ios:pod:install"
    caddie cli:indent "caddie ios:swift:version"
    caddie cli:blank
}

function caddie_ios_description() {
    echo 'iOS Development'
}

# Export iOS functions
export -f caddie_ios_description
export -f caddie_ios_setup
export -f caddie_ios_rust_setup
export -f caddie_ios_simulator
export -f caddie_ios_device
export -f caddie_ios_build
export -f caddie_ios_run
export -f caddie_ios_test
export -f caddie_ios_archive
export -f caddie_ios_clean
export -f caddie_ios_pod_install
export -f caddie_ios_pod_update
export -f caddie_ios_swift_version
export -f caddie_ios_xcode_version
export -f caddie_ios_help