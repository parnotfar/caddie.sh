#!/bin/bash

# Caddie.sh - Ruby Environment Management (RVM-based)
# This file provides Ruby development environment management using RVM

# Source CLI module for formatting
source "$HOME/.caddie_modules/.caddie_cli"

function caddie_ruby_description() {
    echo 'Ruby environment management with RVM'
    return 0
}

# Function to show detailed Ruby help
function caddie_ruby_help() {
    caddie cli:title "Ruby Environment Management (RVM-based)"
    caddie cli:blank
    caddie cli:usage "caddie ruby:<command> [args]"
    caddie cli:blank
    caddie cli:title "Environment Management:"
    caddie cli:indent "setup                    Setup Ruby development environment with RVM"
    caddie cli:indent "install <version>        Install specific Ruby version"
    caddie cli:indent "use <version>            Switch to specific Ruby version"
    caddie cli:indent "list                     List installed Ruby versions"
    caddie cli:indent "current                  Show current Ruby version"
    caddie cli:indent "version                  Show Ruby and RVM version information"
    caddie cli:blank
    caddie cli:title "Gemset Management:"
    caddie cli:indent "gemset:create <name>     Create new gemset"
    caddie cli:indent "gemset:use <name>        Switch to specific gemset"
    caddie cli:indent "gemset:list              List available gemsets"
    caddie cli:indent "gemset:delete <name>     Delete gemset"
    caddie cli:blank
    caddie cli:title "Gem Management:"
    caddie cli:indent "gem:install <gem>        Install Ruby gem"
    caddie cli:indent "gem:uninstall <gem>      Uninstall Ruby gem"
    caddie cli:indent "gem:list                 List installed gems"
    caddie cli:indent "gem:update <gem>         Update Ruby gem"
    caddie cli:indent "gem:outdated             Show outdated gems"
    caddie cli:blank
    caddie cli:title "Project Management:"
    caddie cli:indent "project:init             Initialize Ruby project structure"
    caddie cli:indent "project:test             Run Ruby tests"
    caddie cli:indent "project:build            Build Ruby project"
    caddie cli:indent "project:serve            Serve Ruby web application"
    caddie cli:blank
    caddie cli:title "Bundler Management:"
    caddie cli:indent "bundler:install          Install Bundler dependencies"
    caddie cli:indent "bundler:update           Update Bundler dependencies"
    caddie cli:indent "bundler:exec <command>   Execute command with Bundler"
    caddie cli:blank
    caddie cli:title "Rails Management:"
    caddie cli:indent "rails:new <app_name>     Create new Rails application"
    caddie cli:indent "rails:server             Start Rails server"
    caddie cli:indent "rails:console            Start Rails console"
    caddie cli:indent "rails:generate <type>    Generate Rails component"
    caddie cli:indent "rails:migrate            Run Rails migrations"
    caddie cli:indent "rails:routes             Show Rails routes"
    caddie cli:blank
    caddie cli:title "Examples:"
    caddie cli:indent "caddie ruby:setup"
    caddie cli:indent "caddie ruby:install 3.2.2"
    caddie cli:indent "caddie ruby:gemset:create myproject"
    caddie cli:indent "caddie ruby:gem:install rails"
    caddie cli:indent "caddie ruby:rails:new myapp"
    caddie cli:blank
    return 0
}

# Function to setup Ruby development environment
function caddie_ruby_setup() {
    caddie cli:title "Setting up Ruby development environment..."
    
    # Check if RVM is installed
    if ! command -v rvm >/dev/null 2>&1; then
        caddie cli:title "Installing RVM..."
        curl -sSL https://get.rvm.io | bash -s stable
        
        # Source RVM
        # shellcheck disable=SC1091
        source "$HOME/.rvm/scripts/rvm"
        
        if ! command -v rvm >/dev/null 2>&1; then
            caddie cli:x "Failed to install RVM"
            return 1
        fi
    else
        caddie cli:check "RVM already installed"
    fi
    
    # Install latest stable Ruby
    caddie cli:title "Installing latest stable Ruby..."
    
    if rvm install ruby --latest; then
        caddie cli:check "Ruby installed successfully"
        rvm use ruby --default
        caddie cli:check "Ruby set as default"
    else
        caddie cli:x "Failed to install Ruby"
        return 1
    fi
    
    # Install essential gems
    caddie cli:title "Installing essential gems..."
    gem install bundler rails rake rspec pry
    
    caddie cli:check "Ruby development environment setup complete"
    caddie_ruby_version
}

# Function to install specific Ruby version
function caddie_ruby_install() {
    local version="$1"
    
    if [ -z "$version" ]; then
        caddie cli:red "Error: Please provide a Ruby version"
        caddie cli:usage "caddie ruby:install <version>"
        caddie cli:thought "Examples: 3.2.2, 3.1.4, 3.0.6"
        return 1
    fi
    
    caddie cli:title "Installing Ruby $version..."
    
    if rvm install "ruby-$version"; then
        caddie cli:check "Ruby $version installed successfully"
        caddie cli:thought "Use 'caddie ruby:use $version' to switch to it"
    else
        caddie cli:x "Failed to install Ruby $version"
        return 1
    fi
}

# Function to switch to specific Ruby version
function caddie_ruby_use() {
    local version="$1"
    
    if [ -z "$version" ]; then
        caddie cli:red "Error: Please provide a Ruby version"
        caddie cli:usage "caddie ruby:use <version>"
        return 1
    fi
    
    caddie cli:title "Switching to Ruby $version..."
    
    if rvm use "ruby-$version"; then
        caddie cli:check "Switched to Ruby $version"
        caddie cli:indent "Current Ruby: $(ruby --version)"
        caddie cli:indent "Current Gem: $(gem --version)"
    else
        caddie cli:x "Failed to switch to Ruby $version"
        return 1
    fi
}

# Function to list installed Ruby versions
function caddie_ruby_list() {
    caddie cli:title "Installed Ruby versions"
    caddie cli:blank
    rvm list
    caddie cli:blank
    caddie cli:indent "Current version: $(ruby --version)"
    return 0
}

# Function to show current Ruby version
function caddie_ruby_current() {
    caddie cli:title "Current Ruby Environment"
    caddie cli:blank
    caddie cli:indent "Ruby: $(ruby --version)"
    caddie cli:indent "Gem: $(gem --version)"
    caddie cli:indent "RVM: $(rvm --version)"
    caddie cli:indent "Gemset: $(rvm gemset name 2>/dev/null || echo 'default')"
    return 0
}

# Function to create new gemset
function caddie_ruby_gemset_create() {
    local gemset_name="$1"
    
    if [ -z "$gemset_name" ]; then
        caddie cli:red "Error: Please provide a gemset name"
        caddie cli:usage "caddie ruby:gemset:create <name>"
        return 1
    fi
    
    echo "Creating gemset '$gemset_name'..."
    
    if rvm gemset create "$gemset_name"; then
        caddie cli:check "Gemset '$gemset_name' created successfully"
        caddie cli:indent "Use 'caddie ruby:gemset:use $gemset_name' to switch to it"
    else
        caddie cli:x "Failed to create gemset '$gemset_name'"
        return 1
    fi
    return 0
}

# Function to switch to specific gemset
function caddie_ruby_gemset_use() {
    local gemset_name="$1"
    
    if [ -z "$gemset_name" ]; then
        caddie cli:red "Error: Please provide a gemset name"
        caddie cli:usage "caddie ruby:gemset:use <name>"
        return 1
    fi
    
    caddie cli:title "Switching to gemset '$gemset_name'..."
    
    if rvm gemset use "$gemset_name"; then
        caddie cli:check "Switched to gemset '$gemset_name'"
        caddie cli:indent "Current gemset: $(rvm gemset name)"
    else
        caddie cli:x "Failed to switch to gemset '$gemset_name'"
        return 1
    fi
    return 0
}

# Function to list available gemsets
function caddie_ruby_gemset_list() {
    caddie cli:title "Available gemsets:"
    caddie cli:blank
    rvm gemset list
    return 0
}

# Function to delete gemset
function caddie_ruby_gemset_delete() {
    local gemset_name="$1"
    
    if [ -z "$gemset_name" ]; then
        caddie cli:red "Error: Please provide a gemset name"
        caddie cli:usage "caddie ruby:gemset:delete <name>"
        return 1
    fi
    
    caddie cli:title "Deleting gemset '$gemset_name'..."
    
    if rvm gemset delete "$gemset_name"; then
        caddie cli:check "Gemset '$gemset_name' deleted successfully"
    else
        caddie cli:x "Failed to delete gemset '$gemset_name'"
        return 1
    fi
    return 0
}

# Function to install Ruby gem
function caddie_ruby_gem_install() {
    local gem_name="$1"
    
    if [ -z "$gem_name" ]; then
        caddie cli:red "Error: Please provide a gem name"
        caddie cli:usage "caddie ruby:gem:install <gem>"
        return 1
    fi
    
    caddie cli:title "Installing gem '$gem_name'..."
    
    if gem install "$gem_name"; then
        caddie cli:check "Gem '$gem_name' installed successfully"
    else
        caddie cli:x "Failed to install gem '$gem_name'"
        return 1
    fi
    return 0
}

# Function to uninstall Ruby gem
function caddie_ruby_gem_uninstall() {
    local gem_name="$1"
    
    if [ -z "$gem_name" ]; then
        caddie cli:red "Error: Please provide a gem name"
        caddie cli:usage "caddie ruby:gem:uninstall <gem>"
        return 1
    fi
    
    caddie cli:title "Uninstalling gem '$gem_name'..."
    
    if gem uninstall "$gem_name"; then
        caddie cli:check "Gem '$gem_name' uninstalled successfully"
    else
        caddie cli:x "Failed to uninstall gem '$gem_name'"
        return 1
    fi
}

# Function to list installed gems
function caddie_ruby_gem_list() {
    caddie cli:title "Installed gems:"
    caddie cli:blank
    gem list
    return 0
}

# Function to update Ruby gem
function caddie_ruby_gem_update() {
    local gem_name="$1"
    
    if [ -z "$gem_name" ]; then
        caddie cli:red "Error: Please provide a gem name"
        caddie cli:usage "caddie ruby:gem:update <gem>"
        return 1
    fi
    
    caddie cli:title "Updating gem '$gem_name'..."
    
    if gem update "$gem_name"; then
        caddie cli:check "Gem '$gem_name' updated successfully"
    else
        caddie cli:x "Failed to update gem '$gem_name'"
        return 1
    fi
    return 0
}

# Function to show outdated gems
function caddie_ruby_gem_outdated() {
    echo "Outdated gems:"
    echo "=============="
    gem outdated
    return 0
}

# Function to initialize Ruby project structure
function caddie_ruby_project_init() {
    local project_name="$1"
    
    if [ -z "$project_name" ]; then
        project_name="my-ruby-project"
    fi
    
    echo "Initializing Ruby project: $project_name"
    
    mkdir -p "$project_name"
    cd "$project_name" || exit
    
    # Create basic project structure
    mkdir -p lib spec bin
    touch "lib/$(echo "$project_name" | tr '-' '_').rb"
    touch spec/spec_helper.rb
    touch "bin/$(echo "$project_name" | tr '-' '_')"
    touch Gemfile
    touch README.md
    touch .gitignore
    
    # Create basic Gemfile
    cat > Gemfile << 'EOF'
source 'https://rubygems.org'

gem 'rake'
gem 'rspec'
gem 'pry'

group :development do
  gem 'rubocop'
  gem 'yard'
end
EOF

    # Create basic .gitignore
    cat > .gitignore << 'EOF'
# Ruby
*.gem
*.rbc
/.config
/coverage/
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/

# Bundler
/.bundle/
/vendor/bundle
/lib/bundler/man/

# RVM
/.ruby-version
/.ruby-gemset

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF

    # Create basic Rakefile
    cat > Rakefile << 'EOF'
require 'rspec/core/rake_task'

RSpec::Core::RakeTask.new(:spec)

task default: :spec
EOF

    echo "✓ Ruby project '$project_name' initialized"
    echo "  Created: lib/, spec/, bin/, Gemfile, README.md, .gitignore, Rakefile"
    return 0
}

# Function to run Ruby tests
function caddie_ruby_project_test() {
    if [ ! -f "Gemfile" ]; then
        caddie cli:red "Error: Not in a Ruby project directory (Gemfile not found)"
        return 1
    fi
    
    echo "Running Ruby tests..."
    
    if [ -f "Rakefile" ]; then
        bundle exec rake spec
    elif [ -d "spec" ]; then
        bundle exec rspec
    else
        echo "No tests found. Create tests in the 'spec' directory"
        return 1
    fi
    return 0
}

# Function to build Ruby project
function caddie_ruby_project_build() {
    if [ ! -f "Gemfile" ]; then
        caddie cli:red "Error: Not in a Ruby project directory (Gemfile not found)"
        return 1
    fi
    
    echo "Building Ruby project..."
    
    # Install dependencies
    bundle install
    
    # Run tests
    if [ -d "spec" ]; then
        bundle exec rspec
    fi
    
    echo "✓ Ruby project built successfully"
    return 0
}

# Function to serve Ruby web application
function caddie_ruby_project_serve() {
    if [ ! -f "Gemfile" ]; then
        caddie cli:red "Error: Not in a Ruby project directory (Gemfile not found)"
        return 1
    fi
    
    echo "Starting Ruby web application..."
    
    # Check if it's a Rails app
    if [ -f "config/application.rb" ]; then
        echo "Detected Rails application"
        bundle exec rails server
    elif [ -f "config.ru" ]; then
        echo "Detected Rack application"
        bundle exec rackup
    elif [ -f "app.rb" ]; then
        echo "Detected Sinatra application"
        bundle exec ruby app.rb
    else
        echo "No web application detected"
        return 1
    fi
    return 0
}

# Function to install Bundler dependencies
function caddie_ruby_bundler_install() {
    if [ ! -f "Gemfile" ]; then
        caddie cli:red "Error: Not in a Ruby project directory (Gemfile not found)"
        return 1
    fi
    
    echo "Installing Bundler dependencies..."
    
    if bundle install; then
        echo "✓ Dependencies installed successfully"
    else
        echo "✗ Failed to install dependencies"
        return 1
    fi
    return 0
}

# Function to update Bundler dependencies
function caddie_ruby_bundler_update() {
    if [ ! -f "Gemfile" ]; then
        caddie cli:red "Error: Not in a Ruby project directory (Gemfile not found)"
        return 1
    fi
    
    echo "Updating Bundler dependencies..."
    
    if bundle update; then
        echo "✓ Dependencies updated successfully"
    else
        echo "✗ Failed to update dependencies"
        return 1
    fi
    return 0
}

# Function to execute command with Bundler
function caddie_ruby_bundler_exec() {
    local command="$1"
    
    if [ -z "$command" ]; then
        caddie cli:red "Error: Please provide a command to execute"
        echo "Usage: caddie ruby:bundler:exec <command>"
        return 1
    fi
    
    if [ ! -f "Gemfile" ]; then
        caddie cli:red "Error: Not in a Ruby project directory (Gemfile not found)"
        return 1
    fi
    
    echo "Executing with Bundler: $command"
    bundle exec "$command"
    return 0
}

# Function to create new Rails application
function caddie_ruby_rails_new() {
    local app_name="$1"
    
    if [ -z "$app_name" ]; then
        caddie cli:red "Error: Please provide an application name"
        echo "Usage: caddie ruby:rails:new <app-name>"
        return 1
    fi
    
    echo "Creating new Rails application: $app_name"
    
    # Check if Rails is installed
    if ! gem list rails -i >/dev/null 2>&1; then
        echo "Installing Rails..."
        gem install rails
    fi
    
    # Create new Rails app
    
    if rails new "$app_name"; then
        echo "✓ Rails application '$app_name' created successfully"
        echo "  Enter directory: cd $app_name"
        echo "  Start server: caddie ruby:rails:server"
    else
        echo "✗ Failed to create Rails application"
        return 1
    fi
    return 0
}

# Function to start Rails server
function caddie_ruby_rails_server() {
    if [ ! -f "config/application.rb" ]; then
        caddie cli:red "Error: Not in a Rails application directory"
        return 1
    fi
    
    echo "Starting Rails server..."
    bundle exec rails server
    return 0
}

# Function to start Rails console
function caddie_ruby_rails_console() {
    if [ ! -f "config/application.rb" ]; then
        caddie cli:red "Error: Not in a Rails application directory"
        return 1
    fi
    
    echo "Starting Rails console..."
    bundle exec rails console
    return 0
}

# Function to generate Rails component
function caddie_ruby_rails_generate() {
    local generator="$1"
    local name="$2"
    
    if [ -z "$generator" ] || [ -z "$name" ]; then
        caddie cli:red "Error: Please provide generator and name"
        echo "Usage: caddie ruby:rails:generate <generator> <name>"
        echo "Examples: model User, controller Users, scaffold Post"
        return 1
    fi
    
    if [ ! -f "config/application.rb" ]; then
        caddie cli:red "Error: Not in a Rails application directory"
        return 1
    fi
    
    echo "Generating Rails component: $generator $name"
    bundle exec rails generate "$generator" "$name"
    return 0
}

# Function to run Rails migrations
function caddie_ruby_rails_migrate() {
    if [ ! -f "config/application.rb" ]; then
        caddie cli:red "Error: Not in a Rails application directory"
        return 1
    fi
    
    echo "Running Rails migrations..."
    bundle exec rails db:migrate
    return 0
}

# Function to show Rails routes
function caddie_ruby_rails_routes() {
    if [ ! -f "config/application.rb" ]; then
        caddie cli:red "Error: Not in a Rails application directory"
        return 1
    fi
    
    echo "Rails routes:"
    echo "============="
    bundle exec rails routes
    return 0
}

# Function to show Ruby and RVM version information
function caddie_ruby_version() {
    caddie cli:title "Ruby Environment Information"
    caddie cli:blank
    caddie cli:indent "Ruby: $(ruby --version)"
    caddie cli:indent "Gem: $(gem --version)"
    caddie cli:indent "RVM: $(rvm --version)"
    caddie cli:indent "Bundler: $(bundle --version 2>/dev/null || echo 'not installed')"
    caddie cli:indent "Rails: $(rails --version 2>/dev/null || echo 'not installed')"
    caddie cli:indent "Current gemset: $(rvm gemset name 2>/dev/null || echo 'default')"
    return 0
}

# Export Ruby functions
export -f caddie_ruby_description
export -f caddie_ruby_setup
export -f caddie_ruby_install
export -f caddie_ruby_use
export -f caddie_ruby_list
export -f caddie_ruby_current
export -f caddie_ruby_gemset_create
export -f caddie_ruby_gemset_use
export -f caddie_ruby_gemset_list
export -f caddie_ruby_gemset_delete
export -f caddie_ruby_gem_install
export -f caddie_ruby_gem_uninstall
export -f caddie_ruby_gem_list
export -f caddie_ruby_gem_update
export -f caddie_ruby_gem_outdated
export -f caddie_ruby_project_init
export -f caddie_ruby_project_test
export -f caddie_ruby_project_build
export -f caddie_ruby_project_serve
export -f caddie_ruby_bundler_install
export -f caddie_ruby_bundler_update
export -f caddie_ruby_bundler_exec
export -f caddie_ruby_rails_new
export -f caddie_ruby_rails_server
export -f caddie_ruby_rails_console
export -f caddie_ruby_rails_generate
export -f caddie_ruby_rails_migrate
export -f caddie_ruby_rails_routes
export -f caddie_ruby_version