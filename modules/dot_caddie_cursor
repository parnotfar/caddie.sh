#!/bin/bash

# Caddie.sh - Cursor IDE Integration
# This file contains all Cursor IDE-related functions

# Source CLI module for formatting
source "$HOME/.caddie_modules/.caddie_cli"

# Function to detect Cursor installation
function caddie_cursor_detect() {
    caddie cli:title "Detecting Cursor IDE installation..."
    
    # Check for Cursor CLI
    if command -v cursor >/dev/null 2>&1; then
        caddie cli:check "Cursor CLI found: $(which cursor)"
        cursor --version
    else
        caddie cli:x "Cursor CLI not found"
        caddie cli:thought "Install from: https://cursor.sh/"
    fi
    
    # Check for Cursor application
    if [ -d "/Applications/Cursor.app" ]; then
        caddie cli:check "Cursor application found"
    else
        caddie cli:x "Cursor application not found"
    fi
    
    # Check for Cursor configuration
    if [ -d "$HOME/.cursor" ]; then
        caddie cli:check "Cursor configuration directory found"
    else
        caddie cli:x "Cursor configuration directory not found"
    fi
    return 0
}

function caddie_cursor_description() {
    echo 'Cursor IDE Integration'
    return 0
}

# Function to setup Cursor integration
function caddie_cursor_setup() {
    caddie cli:title "Setting up Cursor IDE integration..."
    
    # Create Cursor configuration directory
    mkdir -p "$HOME/.cursor/User"
    
    # Create basic settings
    cat > "$HOME/.cursor/User/settings.json" << EOF
{
  "caddie.integration.enabled": true,
  "caddie.ai.features.enabled": true,
  "caddie.project.templates.enabled": true,
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": true
  },
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 1000
}
EOF
    
    # Create keybindings
    cat > "$HOME/.cursor/User/keybindings.json" << EOF
[
  {
    "key": "cmd+shift+c",
    "command": "caddie.openTerminal",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+shift+a",
    "command": "caddie.ai.explain",
    "when": "editorTextFocus"
  }
]
EOF
    
    caddie cli:check "Cursor integration setup complete"
    return 0
}

# Function to verify Cursor integration
function caddie_cursor_verify() {
    caddie cli:title "Verifying Cursor IDE integration..."
    
    local issues=0
    
    # Check CLI
    if ! command -v cursor >/dev/null 2>&1; then
        caddie cli:x "Cursor CLI not available"
        ((issues++))
    else
        caddie cli:check "Cursor CLI available"
    fi
    
    # Check configuration
    if [ ! -f "$HOME/.cursor/User/settings.json" ]; then
        caddie cli:x "Cursor settings not configured"
        ((issues++))
    else
        caddie cli:check "Cursor settings configured"
    fi
    
    # Check AI features
    if [ ! -d ".cursor" ]; then
        caddie cli:warning "Cursor AI features not initialized in current project"
    else
        caddie cli:check "Cursor AI features available"
    fi
    
    if [ $issues -eq 0 ]; then
        caddie cli:check "Cursor integration verified successfully"
    else
        caddie cli:x "Found $issues issues with Cursor integration"
        caddie cli:thought "Run 'caddie cursor:setup' to fix issues"
    fi
    return 0
}

# Function to open project in Cursor
function caddie_cursor_open() {
    local path="$1"
    
    if [ -z "$path" ]; then
        path="."
    fi
    
    if [ ! -d "$path" ]; then
        caddie cli:red "Error: Directory '$path' does not exist"
        return 1
    fi
    
    caddie cli:title "Opening '$path' in Cursor..."
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$path"
        caddie cli:check "Opened '$path' in Cursor"
    else
        caddie cli:x "Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
    return 0
}

# Function to create new project and open in Cursor
function caddie_cursor_new() {
    local project_type="$1"
    local project_name="$2"
    
    if [ -z "$project_type" ] || [ -z "$project_name" ]; then
        caddie cli:red "Error: Please provide project type and name"
        caddie cli:usage "caddie cursor:new <type> <name>"
        caddie cli:thought "Types: web, api, mobile, data, ml, cli, lib"
        return 1
    fi
    
    caddie cli:title "Creating new $project_type project '$project_name'..."
    
    # Create project using template
    caddie_template_create "$project_type" "$project_name"
    
    if caddie_template_create "$project_type" "$project_name"; then
        # Setup Cursor-specific configuration
        caddie_cursor_setup_project "$project_name" "$project_type"
        
        # Open in Cursor
        caddie_cursor_open "$project_name"
        
        caddie cli:check "Project '$project_name' created and opened in Cursor"
    else
        caddie cli:x "Failed to create project '$project_name'"
        return 1
    fi
    return 0
}

# Function to setup Cursor-specific project configuration
function caddie_cursor_setup_project() {
    local project_name="$1"
    local project_type="$2"
    
    caddie cli:title "Setting up Cursor configuration for $project_type project..."
    
    mkdir -p "$project_name/.cursor"
    
    # Create project-specific settings
    cat > "$project_name/.cursor/settings.json" << EOF
{
  "caddie.project.type": "$project_type",
  "caddie.project.name": "$project_name",
  "caddie.ai.enabled": true,
  "caddie.templates.applied": true,
  "caddie.extensions.recommended": [
    "ms-python.python",
    "rust-lang.rust-analyzer",
    "ms-vscode.vscode-json"
  ]
}
EOF
    
    # Create launch configuration
    cat > "$project_name/.cursor/launch.json" << 'EOF'
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Project",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/src/main.js",
      "console": "integratedTerminal"
    }
  ]
}
EOF
    
    # Create tasks configuration
    cat > "$project_name/.cursor/tasks.json" << 'EOF'
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "caddie:build",
      "type": "shell",
      "command": "caddie",
      "args": ["build:all"],
      "group": "build"
    },
    {
      "label": "caddie:test",
      "type": "shell",
      "command": "caddie",
      "args": ["python:test"],
      "group": "test"
    }
  ]
}
EOF
    
    caddie cli:check "Cursor project configuration created"
    return 0
}

# Function to show Cursor workspace info
function caddie_cursor_workspace() {
    caddie cli:title "Cursor Workspace Information"
    caddie cli:blank
    
    if [ -f ".cursor/settings.json" ]; then
        caddie cli:title "Project Settings:"
        cat .cursor/settings.json | jq '.' 2>/dev/null || cat .cursor/settings.json
    else
        caddie cli:warning "No project-specific Cursor settings found"
    fi
    
    if [ -f ".cursor/launch.json" ]; then
        caddie cli:blank
        caddie cli:title "Launch Configurations:"
        cat .cursor/launch.json | jq '.' 2>/dev/null || cat .cursor/launch.json
    fi
    
    if [ -f ".cursor/tasks.json" ]; then
        caddie cli:blank
        caddie cli:title "Tasks Configuration:"
        cat .cursor/tasks.json | jq '.' 2>/dev/null || cat .cursor/tasks.json
    fi
    return 0
}

# Function to list recently opened projects
function caddie_cursor_recent() {
    caddie cli:title "Recently Opened Projects in Cursor"
    caddie cli:blank
    
    if [ -d "$HOME/.cursor/User/workspaceStorage" ]; then
        find "$HOME/.cursor/User/workspaceStorage" -name "*.json" -exec basename {} \; | sed 's/\.json$//' | head -10
    else
        caddie cli:warning "No recent projects found"
    fi
    return 0
}

# Function to switch to different project
function caddie_cursor_switch() {
    local project="$1"
    
    if [ -z "$project" ]; then
        caddie cli:red "Error: Please provide a project name"
        caddie cli:usage "caddie cursor:switch <project>"
        caddie cli:thought "Use 'caddie cursor:recent' to see recent projects"
        return 1
    fi
    
    # Try to find project in common locations
    local project_path=""
    
    for dir in "$HOME/projects" "$HOME/work" "$HOME/development"; do
        if [ -d "$dir/$project" ]; then
            project_path="$dir/$project"
            break
        fi
    done
    
    if [ -z "$project_path" ]; then
        caddie cli:red "Error: Project '$project' not found in common directories"
        return 1
    fi
    
    caddie cli:title "Switching to project '$project'..."
    caddie_cursor_open "$project_path"
    return 0
}

# AI-powered development functions
function caddie_cursor_ai_explain() {
    local file="$1"
    
    if [ -z "$file" ]; then
        caddie cli:red "Error: Please provide a file path"
        caddie cli:usage "caddie cursor:ai:explain <file>"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        caddie cli:red "Error: File '$file' does not exist"
        return 1
    fi
    
    caddie cli:title "Asking AI to explain: $file"
    
    local ai_prompt_file=".cursor/ai-explain-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Code Explanation Request

**File:** $file
**Request:** Please explain this code in detail, including:
- What the code does
- How it works
- Key functions and variables
- Potential improvements
- Any potential issues

**Code:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted code explanation.
EOF
    
    caddie cli:check "AI explanation request created: $ai_prompt_file"
    caddie cli:thought "Open this file in Cursor and use AI chat to get explanation"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
    return 0
}

function caddie_cursor_ai_refactor() {
    local file="$1"
    local refactor_type="${2:-general}"
    
    if [ -z "$file" ]; then
        caddie cli:red "Error: Please provide a file path"
        caddie cli:usage "caddie cursor:ai:refactor <file> [type]"
        caddie cli:thought "Types: general, performance, readability, security, structure"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        caddie cli:red "Error: File '$file' does not exist"
        return 1
    fi
    
    caddie cli:title "Asking AI to refactor: $file (type: $refactor_type)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-refactor-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Code Refactoring Request

**File:** $file
**Refactor Type:** $refactor_type
**Request:** Please refactor this code with focus on $refactor_type, including:
- Improved code structure
- Better performance (if applicable)
- Enhanced readability
- Security improvements (if applicable)
- Modern best practices

**Original Code:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted code refactoring.
EOF
    
    caddie cli:check "AI refactoring request created: $ai_prompt_file"
    caddie cli:thought "Open this file in Cursor and use AI chat to get refactored code"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
    return 0
}

function caddie_cursor_ai_test() {
    local file="$1"
    local test_framework="${2:-pytest}"
    
    if [ -z "$file" ]; then
        caddie cli:red "Error: Please provide a file path"
        caddie cli:usage "caddie cursor:ai:test <file> [framework]"
        caddie cli:thought "Frameworks: pytest, unittest, jest, mocha, rspec"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        caddie cli:red "Error: File '$file' does not exist"
        return 1
    fi
    
    caddie cli:title "Asking AI to generate tests for: $file (framework: $test_framework)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-test-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Test Generation Request

**File:** $file
**Test Framework:** $test_framework
**Request:** Please generate comprehensive tests for this code using $test_framework, including:
- Unit tests for all functions
- Edge cases and error conditions
- Mock objects where appropriate
- Test data and fixtures
- Clear test descriptions

**Code to Test:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted test generation.
EOF
    
    caddie cli:check "AI test generation request created: $ai_prompt_file"
    caddie cli:thought "Open this file in Cursor and use AI chat to get generated tests"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
    return 0
}

function caddie_cursor_ai_docs() {
    local file="$1"
    local doc_format="${2:-markdown}"
    
    if [ -z "$file" ]; then
        caddie cli:red "Error: Please provide a file path"
        caddie cli:usage "caddie cursor:ai:docs <file> [format]"
        caddie cli:thought "Formats: markdown, sphinx, javadoc, godoc, rustdoc"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        caddie cli:red "Error: File '$file' does not exist"
        return 1
    fi
    
    caddie cli:title "Asking AI to generate documentation for: $file (format: $doc_format)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-docs-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Documentation Generation Request

**File:** $file
**Documentation Format:** $doc_format
**Request:** Please generate comprehensive documentation for this code in $doc_format format, including:
- Function/class descriptions
- Parameter documentation
- Return value documentation
- Usage examples
- Code comments

**Code to Document:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted documentation generation.
EOF
    
    caddie cli:check "AI documentation request created: $ai_prompt_file"
    caddie cli:thought "Open this file in Cursor and use AI chat to get generated documentation"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
}

function caddie_cursor_ai_review() {
    local file="$1"
    local review_focus="${2:-general}"
    
    if [ -z "$file" ]; then
        caddie cli:red "Error: Please provide a file path"
        caddie cli:usage "caddie cursor:ai:review <file> [focus]"
        caddie cli:thought "Focus: general, security, performance, style, bugs, best-practices"
        return 1
    fi
    
    if [ ! -f "$file" ]; then
        caddie cli:red "Error: File '$file' does not exist"
        return 1
    fi
    
    caddie cli:title "Asking AI to review: $file (focus: $review_focus)"
    
    local ai_prompt_file
    ai_prompt_file=".cursor/ai-review-$(basename "$file").md"
    mkdir -p .cursor
    
    cat > "$ai_prompt_file" << EOF
# AI Code Review Request

**File:** $file
**Review Focus:** $review_focus
**Request:** Please review this code with focus on $review_focus, including:
- Code quality assessment
- Potential bugs or issues
- Security vulnerabilities (if applicable)
- Performance concerns (if applicable)
- Style and best practices
- Suggestions for improvement

**Code to Review:**
\`\`\`
$(cat "$file")
\`\`\`

**Context:** This is a request from the caddie CLI tool for AI-assisted code review.
EOF
    
    caddie cli:check "AI code review request created: $ai_prompt_file"
    caddie cli:thought "Open this file in Cursor and use AI chat to get code review"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor "$ai_prompt_file"
    fi
    return 0
}

# Extension management functions
function caddie_cursor_ext_install() {
    local extension_id="$1"
    
    if [ -z "$extension_id" ]; then
        caddie cli:red "Error: Please provide an extension ID"
        caddie cli:usage "caddie cursor:ext:install <extension-id>"
        caddie cli:thought "Example: caddie cursor:ext:install ms-python.python"
        return 1
    fi
    
    caddie cli:title "Installing Cursor extension: $extension_id"
    
    if command -v cursor >/dev/null 2>&1; then
        cursor --install-extension "$extension_id"
        caddie cli:check "Extension '$extension_id' installed"
    else
        caddie cli:x "Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
    return 0
}

function caddie_cursor_ext_list() {
    caddie cli:title "Installed Cursor Extensions"
    caddie cli:blank
    
    if command -v cursor >/dev/null 2>&1; then
        cursor --list-extensions
    else
        caddie cli:x "Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
    return 0
}

function caddie_cursor_ext_update() {
    caddie cli:title "Updating all Cursor extensions..."
    
    if command -v cursor >/dev/null 2>&1; then
        cursor --update-extensions
        caddie cli:check "All extensions updated"
    else
        caddie cli:x "Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
    return 0
}

function caddie_cursor_ext_sync() {
    caddie cli:title "Syncing Cursor extensions..."
    
    # Create extensions list
    if command -v cursor >/dev/null 2>&1; then
        cursor --list-extensions > "$HOME/.cursor/extensions.txt"
        caddie cli:check "Extensions list saved to ~/.cursor/extensions.txt"
    else
        caddie cli:x "Cursor CLI not found. Please install Cursor IDE"
        return 1
    fi
    return 0
}

function caddie_cursor_ext_recommend() {
    local project_type="$1"
    
    if [ -z "$project_type" ]; then
        caddie cli:red "Error: Please provide a project type"
        caddie cli:usage "caddie cursor:ext:recommend <type>"
        caddie cli:thought "Types: python, rust, javascript, typescript, web, mobile, data, ml"
        return 1
    fi
    
    caddie cli:title "Recommended extensions for $project_type projects:"
    caddie cli:blank
    
    case "$project_type" in
        "python")
            caddie cli:indent "ms-python.python - Python language support"
            caddie cli:indent "ms-python.pylint - Python linting"
            caddie cli:indent "ms-python.black-formatter - Python formatting"
            caddie cli:indent "ms-python.isort - Import sorting"
            ;;
        "rust")
            caddie cli:indent "rust-lang.rust-analyzer - Rust language support"
            caddie cli:indent "vadimcn.vscode-lldb - Rust debugging"
            ;;
        "javascript"|"typescript")
            caddie cli:indent "ms-vscode.vscode-typescript-next - TypeScript support"
            caddie cli:indent "esbenp.prettier-vscode - Code formatting"
            caddie cli:indent "ms-vscode.vscode-eslint - JavaScript linting"
            ;;
        "web")
            caddie cli:indent "ms-vscode.vscode-html - HTML support"
            caddie cli:indent "ms-vscode.vscode-css - CSS support"
            caddie cli:indent "bradlc.vscode-tailwindcss - Tailwind CSS support"
            ;;
        "mobile")
            caddie cli:indent "ms-vscode.vscode-react-native - React Native support"
            caddie cli:indent "ms-vscode.vscode-flutter - Flutter support"
            ;;
        "data"|"ml")
            caddie cli:indent "ms-python.python - Python support"
            caddie cli:indent "ms-toolsai.jupyter - Jupyter notebook support"
            caddie cli:indent "ms-python.pylint - Python linting"
            ;;
        *)
            caddie cli:red "Unknown project type: $project_type"
            return 1
            ;;
    esac
    return 0
}

# Configuration management functions
function caddie_cursor_config_show() {
    caddie cli:title "Cursor Configuration"
    caddie cli:blank
    
    if [ -f "$HOME/.cursor/User/settings.json" ]; then
        caddie cli:title "User Settings:"
        cat "$HOME/.cursor/User/settings.json" | jq '.' 2>/dev/null || cat "$HOME/.cursor/User/settings.json"
    fi
    
    if [ -f "$HOME/.cursor/User/keybindings.json" ]; then
        caddie cli:blank
        caddie cli:title "Keybindings:"
        cat "$HOME/.cursor/User/keybindings.json" | jq '.' 2>/dev/null || cat "$HOME/.cursor/User/keybindings.json"
    fi
    return 0
}

function caddie_cursor_config_backup() {
    local backup_dir
    backup_dir="$HOME/.cursor-backups/$(date +%Y%m%d_%H%M%S)"
    
    caddie cli:save "Backing up Cursor configuration to $backup_dir..."
    mkdir -p "$backup_dir"
    
    # Backup settings
    if [ -d "$HOME/.cursor" ]; then
        cp -r "$HOME/.cursor" "$backup_dir/"
    fi
    
    # Backup extensions list
    if command -v cursor >/dev/null 2>&1; then
        cursor --list-extensions > "$backup_dir/extensions.txt"
    fi
    
    caddie cli:check "Cursor configuration backed up to $backup_dir"
    return 0
}

function caddie_cursor_config_restore() {
    local backup_path="$1"
    
    if [ -z "$backup_path" ]; then
        caddie cli:red "Error: Please provide backup path"
        caddie cli:usage "caddie cursor:config:restore <backup-path>"
        return 1
    fi
    
    if [ ! -d "$backup_path" ]; then
        caddie cli:red "Error: Backup directory '$backup_path' does not exist"
        return 1
    fi
    
    caddie cli:title "Restoring Cursor configuration from $backup_path..."
    
    # Restore settings
    if [ -d "$backup_path/.cursor" ]; then
        cp -r "$backup_path/.cursor" "$HOME/"
    fi
    
    # Restore extensions
    if [ -f "$backup_path/extensions.txt" ]; then
        while read -r extension; do
            cursor --install-extension "$extension"
        done < "$backup_path/extensions.txt"
    fi
    
    caddie cli:check "Cursor configuration restored"
    return 0
}

function caddie_cursor_config_sync() {
    caddie cli:title "Syncing Cursor configuration..."
    
    # Create backup first
    caddie_cursor_config_backup
    
    # Sync settings across devices (placeholder for cloud sync)
    caddie cli:check "Cursor configuration synced"
    caddie cli:thought "Note: Manual cloud sync may be required"
    return 0
}

function caddie_cursor_config_optimize() {
    caddie cli:title "Optimizing Cursor configuration for performance..."
    
    # Create optimized settings
    cat > "$HOME/.cursor/User/settings.json" << EOF
{
  "caddie.integration.enabled": true,
  "caddie.ai.features.enabled": true,
  "caddie.project.templates.enabled": true,
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": true
  },
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 1000,
  "editor.minimap.enabled": false,
  "editor.suggest.showWords": false,
  "editor.quickSuggestions": {
    "other": false,
    "comments": false,
    "strings": false
  },
  "workbench.enableExperiments": false,
  "telemetry.telemetryLevel": "off"
}
EOF
    
    caddie cli:check "Cursor configuration optimized for performance"
    return 0
}

# Function to display Cursor module help
function caddie_cursor_help() {
    caddie cli:title "Cursor IDE Integration"
    caddie cli:blank
    caddie cli:usage "caddie cursor:<command>"
    caddie cli:blank
    caddie cli:title "Setup & Verification:"
    caddie cli:indent "detect             Detect Cursor installation"
    caddie cli:indent "setup              Setup Cursor integration"
    caddie cli:indent "verify             Verify Cursor integration"
    caddie cli:blank
    caddie cli:title "Project Management:"
    caddie cli:indent "open <path>        Open project in Cursor"
    caddie cli:indent "new <type> <name>  Create new project and open in Cursor"
    caddie cli:indent "workspace          Show Cursor workspace info"
    caddie cli:indent "recent             List recently opened projects"
    caddie cli:indent "switch <project>   Switch to different project"
    caddie cli:blank
    caddie cli:title "AI-Powered Development:"
    caddie cli:indent "ai:explain <file>  Ask AI to explain code"
    caddie cli:indent "ai:refactor <file> AI-assisted refactoring"
    caddie cli:indent "ai:test <file>     Generate tests with AI"
    caddie cli:indent "ai:docs <file>     Generate documentation with AI"
    caddie cli:indent "ai:review <file>   AI code review"
    caddie cli:blank
    caddie cli:title "Extension Management:"
    caddie cli:indent "ext:install <id>   Install Cursor extension"
    caddie cli:indent "ext:list           List installed extensions"
    caddie cli:indent "ext:update         Update all extensions"
    caddie cli:indent "ext:sync           Sync extensions across devices"
    caddie cli:indent "ext:recommend <type> Recommend extensions for project type"
    caddie cli:blank
    caddie cli:title "Configuration Management:"
    caddie cli:indent "config:show        Show Cursor configuration"
    caddie cli:indent "config:backup      Backup Cursor settings"
    caddie cli:indent "config:restore <path> Restore Cursor settings"
    caddie cli:indent "config:sync        Sync Cursor settings"
    caddie cli:indent "config:optimize    Optimize Cursor for performance"
    caddie cli:blank
    caddie cli:title "Examples:"
    caddie cli:indent "caddie cursor:detect"
    caddie cli:indent "caddie cursor:open ~/projects/myapp"
    caddie cli:indent "caddie cursor:ai:explain src/main.py"
    caddie cli:indent "caddie cursor:ext:install ms-python.python"
    caddie cli:indent "caddie cursor:config:backup"
    caddie cli:blank
    return 0
}
# Export Cursor functions
export -f caddie_cursor_description
export -f caddie_cursor_detect
export -f caddie_cursor_verify
export -f caddie_cursor_open
export -f caddie_cursor_new
export -f caddie_cursor_setup_project
export -f caddie_cursor_workspace
export -f caddie_cursor_recent
export -f caddie_cursor_switch
export -f caddie_cursor_ai_explain
export -f caddie_cursor_ai_refactor
export -f caddie_cursor_ai_test
export -f caddie_cursor_ai_docs
export -f caddie_cursor_ai_review
export -f caddie_cursor_ext_install
export -f caddie_cursor_ext_list
export -f caddie_cursor_ext_update
export -f caddie_cursor_ext_sync
export -f caddie_cursor_config_show
export -f caddie_cursor_config_backup
export -f caddie_cursor_config_restore
export -f caddie_cursor_config_sync
export -f caddie_cursor_config_optimize
export -f caddie_cursor_help
export -f caddie_cursor_description

# Function to show cursor module help
function caddie_cursor_help() {
    caddie cli:title "Cursor IDE Integration Help"
    caddie cli:blank
    caddie cli:indent "Available commands:"
    caddie cli:indent "  caddie cursor:open           - Open current directory in Cursor"
    caddie cli:indent "  caddie cursor:new            - Create new Cursor project"
    caddie cli:indent "  caddie cursor:ext:list       - List installed extensions"
    caddie cli:indent "  caddie cursor:ext:install    - Install extension"
    caddie cli:indent "  caddie cursor:ext:uninstall  - Uninstall extension"
    caddie cli:indent "  caddie cursor:ext:update     - Update all extensions"
    caddie cli:indent "  caddie cursor:config:show    - Show current configuration"
    caddie cli:indent "  caddie cursor:config:backup  - Backup configuration"
    caddie cli:indent "  caddie cursor:config:restore - Restore configuration"
    caddie cli:indent "  caddie cursor:config:sync    - Sync configuration"
    caddie cli:indent "  caddie cursor:config:optimize - Optimize configuration"
    caddie cli:indent "  caddie cursor:help           - Show this help"
    caddie cli:blank
    caddie cli:indent "This module provides integration with Cursor IDE for"
    caddie cli:indent "project management, extension handling, and configuration."
    return 0
}

# Function to show cursor module description
function caddie_cursor_description() {
    # caddie:lint:disable
    echo "Cursor IDE integration and project management utilities"
    # caddie:lint:enable
    return 0
}

export -f caddie_cursor_ext_recommend
export -f caddie_cursor_config_show
export -f caddie_cursor_config_backup
export -f caddie_cursor_config_restore
export -f caddie_cursor_config_sync
export -f caddie_cursor_config_optimize
export -f caddie_cursor_help
export -f caddie_cursor_description
