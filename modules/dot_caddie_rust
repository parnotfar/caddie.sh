#!/bin/bash

# Caddie.sh - Rust Environment Management
# This file contains all Rust-related functions

# Source CLI module for formatting
source "$HOME/.caddie_modules/.caddie_cli"

function caddie_rust_load_env() {
    if [ -f "$HOME/.cargo/env" ]; then
        source "$HOME/.cargo/env"
    else
        caddie cli:red "Error: Rust environment not found at ~/.cargo/env"
        caddie cli:thought "Please install Rust first: https://rustup.rs/"
        return 1
    fi
}

# Source Rust environment when module is loaded
caddie_rust_load_env

# Function to create a new Rust project
function caddie_rust_new() {
    caddie_rust_load_env
    
    local project_name="$1"
    
    if [ -z "$project_name" ]; then
        caddie cli:red "Error: Please provide a project name"
        caddie cli:usage "caddie rust:new <name>"
        return 1
    fi
    
    if [ -d "$project_name" ]; then
        caddie cli:red "Error: Directory '$project_name' already exists"
        return 1
    fi
    
    caddie cli:title "Creating new Rust project '$project_name'..."
    cargo new "$project_name"
    caddie cli:check "Rust project '$project_name' created successfully"
    caddie cli:indent "Location: $(pwd)/$project_name"
    caddie cli:indent "Enter directory: cd $project_name"
    caddie cli:indent "Build project: caddie rust:build"
}

# Function to build current Rust project
function caddie_rust_build() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Building Rust project..."
    cargo build
    caddie cli:check "Rust project built successfully"
}

# Function to run current Rust project
function caddie_rust_run() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running Rust project..."
    cargo run
    caddie cli:check "Rust project ran successfully"
}

# Function to run Rust tests
function caddie_rust_test() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running Rust tests..."
    cargo test
    caddie cli:check "Rust tests completed successfully"
}

# Function to check Rust project without building
function caddie_rust_check() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Checking Rust project..."
    cargo check
    caddie cli:check "Rust project check passed"
}

# Function to clean Rust build artifacts
function caddie_rust_clean() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Cleaning Rust build artifacts..."
    cargo clean
    caddie cli:check "Rust build artifacts cleaned"
}

# Function to update Rust dependencies
function caddie_rust_update() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Updating Rust dependencies..."
    cargo update
    caddie cli:check "Rust dependencies updated"
}

# Function to add a Rust dependency
function caddie_rust_add() {
    caddie_rust_load_env
    
    local crate="$1"
    
    if [ -z "$crate" ]; then
        caddie cli:red "Error: Please provide a crate name"
        caddie cli:usage "caddie rust:add <crate>"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Adding dependency '$crate'..."
    cargo add "$crate"
    caddie cli:check "Dependency '$crate' added successfully"
}

# Function to remove a Rust dependency
function caddie_rust_remove() {
    caddie_rust_load_env
    
    local crate="$1"
    
    if [ -z "$crate" ]; then
        caddie cli:red "Error: Please provide a crate name"
        caddie cli:usage "caddie rust:remove <crate>"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Removing dependency '$crate'..."
    cargo remove "$crate"
    caddie cli:check "Dependency '$crate' removed successfully"
}

# Function to search crates.io
function caddie_rust_search() {
    caddie_rust_load_env
    
    local query="$1"
    
    if [ -z "$query" ]; then
        caddie cli:red "Error: Please provide a search query"
        caddie cli:usage "caddie rust:search <query>"
        return 1
    fi
    
    caddie cli:title "Searching crates.io for '$query'..."
    cargo search "$query"
}

# Function to show outdated Rust dependencies
function caddie_rust_outdated() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Checking for outdated Rust dependencies..."
    
    # Try cargo-outdated if available, otherwise show current versions
    if command -v cargo-outdated >/dev/null 2>&1; then
        cargo outdated
    else
        caddie cli:title "Installing cargo-outdated for better outdated dependency checking..."
        cargo install cargo-outdated
        cargo outdated
    fi
}

# Function to run Rust security audit
function caddie_rust_audit() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running Rust security audit..."
    
    # Try cargo-audit if available, otherwise install it
    if command -v cargo-audit >/dev/null 2>&1; then
        cargo audit
    else
        caddie cli:title "Installing cargo-audit for security auditing..."
        cargo install cargo-audit
        cargo audit
    fi
}

# Function to switch Rust toolchain
function caddie_rust_toolchain() {
    caddie_rust_load_env
    
    local version="$1"
    
    if [ -z "$version" ]; then
        caddie cli:red "Error: Please provide a toolchain version"
        caddie cli:usage "caddie rust:toolchain <version>"
        caddie cli:thought "Examples: stable, beta, nightly, 1.70.0"
        return 1
    fi
    
    caddie cli:title "Switching to Rust toolchain '$version'..."
    rustup default "$version"
    caddie cli:check "Switched to Rust toolchain '$version'"
    caddie cli:indent "Current version: $(rustc --version)"
}

# Function to add Rust compilation target
function caddie_rust_target() {
    caddie_rust_load_env
    
    local target="$1"
    
    if [ -z "$target" ]; then
        caddie cli:red "Error: Please provide a target"
        caddie cli:usage "caddie rust:target <target>"
        caddie cli:thought "Examples: x86_64-unknown-linux-gnu, aarch64-apple-darwin"
        return 1
    fi
    
    caddie cli:title "Adding Rust target '$target'..."
    rustup target add "$target"
    caddie cli:check "Added Rust target '$target'"
}

# Function to install Rust component
function caddie_rust_component() {
    caddie_rust_load_env
    
    local component="$1"
    
    if [ -z "$component" ]; then
        caddie cli:red "Error: Please provide a component name"
        caddie cli:usage "caddie rust:component <component>"
        caddie cli:thought "Examples: clippy, rustfmt, rust-src"
        return 1
    fi
    
    caddie cli:title "Installing Rust component '$component'..."
    rustup component add "$component"
    caddie cli:check "Installed Rust component '$component'"
}

# Function to display Rust module help
function caddie_rust_help() {
    caddie cli:title "Rust Development Tools"
    caddie cli:blank
    caddie cli:usage "caddie rust:<command>"
    caddie cli:blank
    caddie cli:title "Project Management:"
    caddie cli:indent "new <name>        Create new Rust project"
    caddie cli:indent "build             Build current project"
    caddie cli:indent "run               Run current project"
    caddie cli:indent "test              Run tests"
    caddie cli:indent "check             Check without building"
    caddie cli:indent "clean             Clean build artifacts"
    caddie cli:blank
    caddie cli:title "Dependency Management:"
    caddie cli:indent "update            Update dependencies"
    caddie cli:indent "add <crate>       Add dependency to Cargo.toml"
    caddie cli:indent "remove <crate>    Remove dependency"
    caddie cli:indent "search <query>    Search crates.io"
    caddie cli:indent "outdated          Show outdated dependencies"
    caddie cli:indent "audit             Security audit"
    caddie cli:blank
    caddie cli:title "Toolchain Management:"
    caddie cli:indent "toolchain <ver>   Switch toolchain (stable/beta/nightly)"
    caddie cli:indent "target <target>   Add compilation target"
    caddie cli:indent "component <comp>  Install component (clippy/rustfmt/etc)"
    caddie cli:blank
    caddie cli:title "Examples:"
    caddie cli:indent "caddie rust:new myproject"
    caddie cli:indent "caddie rust:build"
    caddie cli:indent "caddie rust:add serde"
    caddie cli:indent "caddie rust:toolchain nightly"
    caddie cli:indent "caddie rust:component clippy"
    caddie cli:blank
}

function caddie_rust_description() {
    echo 'Rust development tools'
}

# Export Rust functions
export -f caddie_rust_load_env
export -f caddie_rust_description
export -f caddie_rust_new
export -f caddie_rust_build
export -f caddie_rust_run
export -f caddie_rust_test
export -f caddie_rust_check
export -f caddie_rust_clean
export -f caddie_rust_update
export -f caddie_rust_add
export -f caddie_rust_remove
export -f caddie_rust_search
export -f caddie_rust_outdated
export -f caddie_rust_audit
export -f caddie_rust_toolchain
export -f caddie_rust_target
export -f caddie_rust_component
export -f caddie_rust_help