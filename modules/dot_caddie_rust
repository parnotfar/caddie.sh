#!/bin/bash

# Caddie.sh - Rust Environment Management
# This file contains all Rust-related functions

# Source CLI module for formatting
source "$HOME/.caddie_modules/.caddie_cli"

function caddie_rust_load_env() {
    if [ -f "$HOME/.cargo/env" ]; then
        source "$HOME/.cargo/env"
    else
        caddie cli:red "Error: Rust environment not found at ~/.cargo/env"
        caddie cli:thought "Please install Rust first: https://rustup.rs/"
        return 1
    fi
}

# Source Rust environment when module is loaded
caddie_rust_load_env

# Function to create a new Rust project with proper .gitignore
function caddie_rust_init() {
    caddie_rust_load_env
    
    local project_name="$1"
    
    if [ -z "$project_name" ]; then
        caddie cli:red "Error: Please provide a project name"
        caddie cli:usage "caddie rust:init <name>"
        return 1
    fi
    
    if [ -d "$project_name" ]; then
        caddie cli:red "Error: Directory '$project_name' already exists"
        return 1
    fi
    
    caddie cli:title "Creating new Rust project '$project_name' with proper .gitignore..."
    cargo new "$project_name"
    
    # Add comprehensive .gitignore
    cat > "$project_name/.gitignore" << 'EOF'
# Rust build artifacts
/target/
**/*.rs.bk
*.pdb

# Cargo
Cargo.lock
*.orig

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# Temporary folders
tmp/
temp/

# Rust specific
*.rlib
*.rmeta
*.so
*.dylib
*.dll
*.exe
EOF
    
    caddie cli:check "Rust project '$project_name' created successfully with .gitignore"
    caddie cli:indent "Location: $(pwd)/$project_name"
    caddie cli:indent "Enter directory: cd $project_name"
    caddie cli:indent "Build project: caddie rust:build"
    caddie cli:indent "Run tests: caddie rust:test:unit"
}

# Function to create a new Rust project
function caddie_rust_new() {
    caddie_rust_load_env
    
    local project_name="$1"
    
    if [ -z "$project_name" ]; then
        caddie cli:red "Error: Please provide a project name"
        caddie cli:usage "caddie rust:new <name>"
        return 1
    fi
    
    if [ -d "$project_name" ]; then
        caddie cli:red "Error: Directory '$project_name' already exists"
        return 1
    fi
    
    caddie cli:title "Creating new Rust project '$project_name'..."
    cargo new "$project_name"
    caddie cli:check "Rust project '$project_name' created successfully"
    caddie cli:indent "Location: $(pwd)/$project_name"
    caddie cli:indent "Enter directory: cd $project_name"
    caddie cli:indent "Build project: caddie rust:build"
}

# Function to build current Rust project
function caddie_rust_build() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Building Rust project..."
    cargo build
    caddie cli:check "Rust project built successfully"
}

# Function to run current Rust project
function caddie_rust_run() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    # Forward all args to cargo run, e.g.:
    # caddie rust:run --example simple_demo
    # caddie rust:run --bin myapp -- --flag value
    caddie cli:title "Running Rust project..."
    cargo run "$@"
    local status=$?
    if [ $status -eq 0 ]; then
        caddie cli:check "Rust project ran successfully"
    else
        caddie cli:red "Rust run failed (exit $status)"
    fi
    return $status
}

# Function to run a specific Cargo example: caddie rust:run:example <name> [-- <args>]
function caddie_rust_run_example() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    local example_name="$1"
    shift || true
    if [ -z "$example_name" ]; then
        caddie cli:red "Error: Please provide an example name"
        caddie cli:usage "caddie rust:run:example <name> [-- <args>]"
        return 1
    fi
    
    caddie cli:title "Running Cargo example '$example_name'..."
    cargo run --example "$example_name" "$@"
    local status=$?
    if [ $status -eq 0 ]; then
        caddie cli:check "Example '$example_name' ran successfully"
    else
        caddie cli:red "Example run failed (exit $status)"
    fi
    return $status
}

# Function to check Rust project without building
function caddie_rust_check() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Checking Rust project..."
    cargo check
    caddie cli:check "Rust project check passed"
}

# Function to run Rust tests
function caddie_rust_test() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    local test_type="${1:-all}"
    
    case "$test_type" in
        "all"|"")
            caddie cli:title "Running all Rust tests..."
            cargo test
            caddie cli:check "All Rust tests completed successfully"
            ;;
        "unit")
            caddie cli:title "Running unit tests only..."
            cargo test --lib
            caddie cli:check "Unit tests completed successfully"
            ;;
        "integration")
            caddie cli:title "Running integration tests only..."
            cargo test --tests
            caddie cli:check "Integration tests completed successfully"
            ;;
        "property")
            caddie cli:title "Running property-based tests..."
            cargo test --test property_tests
            caddie cli:check "Property-based tests completed successfully"
            ;;
        "bench")
            caddie cli:title "Running benchmarks..."
            cargo bench
            caddie cli:check "Benchmarks completed successfully"
            ;;
        "watch")
            caddie cli:title "Running tests in watch mode..."
            if command -v cargo-watch >/dev/null 2>&1; then
                cargo watch -x test
            else
                caddie cli:title "Installing cargo-watch for test watching..."
                cargo install cargo-watch
                cargo watch -x test
            fi
            ;;
        "coverage")
            caddie cli:title "Running tests with coverage..."
            if command -v cargo-tarpaulin >/dev/null 2>&1; then
                cargo tarpaulin --out Html
                caddie cli:check "Coverage report generated in target/tarpaulin/"
            else
                caddie cli:title "Installing cargo-tarpaulin for coverage..."
                cargo install cargo-tarpaulin
                cargo tarpaulin --out Html
                caddie cli:check "Coverage report generated in target/tarpaulin/"
            fi
            ;;
        *)
            caddie cli:red "Error: Unknown test type '$test_type'"
            caddie cli:usage "caddie rust:test [all|unit|integration|property|bench|watch|coverage|simulation]"
            return 1
            ;;
    esac
}

# Function to run simulation-specific tests and validation
function caddie_rust_simulation_test() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    local test_mode="${1:-full}"
    
    case "$test_mode" in
        "full")
            caddie cli:title "Running full simulation test suite..."
            caddie cli:indent "Running unit tests..."
            cargo test --lib -- --nocapture
            caddie cli:indent "Running integration tests..."
            cargo test --tests -- --nocapture 2>/dev/null || caddie cli:thought "No integration tests found"
            caddie cli:indent "Running property-based tests..."
            cargo test --test property_tests -- --nocapture 2>/dev/null || caddie cli:thought "No property tests found"
            caddie cli:check "Full simulation test suite completed"
            ;;
        "quick")
            caddie cli:title "Running quick simulation validation..."
            cargo test --lib -- --nocapture
            caddie cli:check "Quick simulation validation completed"
            ;;
        "property")
            caddie cli:title "Running property-based simulation tests..."
            cargo test --test property_tests -- --nocapture
            caddie cli:check "Property-based simulation tests completed"
            ;;
        "bench")
            caddie cli:title "Running simulation benchmarks..."
            cargo bench
            caddie cli:check "Simulation benchmarks completed"
            ;;
        "validate")
            caddie cli:title "Validating simulation outputs..."
            caddie cli:indent "Checking probability bounds..."
            cargo test --lib -- --nocapture | grep -E "(probability|Probability)" || true
            caddie cli:indent "Checking result validation..."
            cargo test --lib -- --nocapture | grep -E "(assert|Assert)" || true
            caddie cli:check "Simulation output validation completed"
            ;;
        *)
            caddie cli:red "Error: Unknown simulation test mode '$test_mode'"
            caddie cli:usage "caddie rust:simulation:test [full|quick|property|bench|validate]"
            return 1
            ;;
    esac
}

# Function to check git status and warn about build artifacts
function caddie_rust_git_status() {
    if [ ! -d ".git" ]; then
        caddie cli:red "Error: Not in a git repository"
        return 1
    fi
    
    caddie cli:title "Checking git status for build artifacts..."
    
    # Check for tracked build artifacts
    local build_files=$(git ls-files | grep -E "(target/|\.rlib|\.rmeta|\.so|\.dylib|\.dll|\.exe|Cargo\.lock)" || true)
    
    if [ -n "$build_files" ]; then
        caddie cli:red "Warning: Build artifacts are tracked in git!"
        caddie cli:indent "Found tracked build files:"
        echo "$build_files" | head -10 | while read -r file; do
            caddie cli:indent "  - $file"
        done
        if [ "$(echo "$build_files" | wc -l)" -gt 10 ]; then
            caddie cli:indent "  ... and $(($(echo "$build_files" | wc -l) - 10)) more files"
        fi
        caddie cli:blank
        caddie cli:title "To fix this:"
        caddie cli:indent "1. Add proper .gitignore: caddie rust:gitignore"
        caddie cli:indent "2. Remove tracked files: caddie rust:git:clean"
        return 1
    else
        caddie cli:check "No build artifacts tracked in git"
    fi
    
    # Check for untracked build artifacts
    local untracked_build=$(git status --porcelain | grep -E "(target/|\.rlib|\.rmeta|\.so|\.dylib|\.dll|\.exe)" || true)
    
    if [ -n "$untracked_build" ]; then
        caddie cli:yellow "Note: Untracked build artifacts found"
        caddie cli:indent "These will be ignored by .gitignore"
    fi
    
    caddie cli:check "Git status check completed"
}

# Function to add proper .gitignore to existing project
function caddie_rust_gitignore() {
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Adding comprehensive .gitignore to Rust project..."
    
    # Check if .gitignore already exists
    if [ -f ".gitignore" ]; then
        caddie cli:yellow "Warning: .gitignore already exists"
        caddie cli:indent "Backing up existing .gitignore to .gitignore.backup"
        cp .gitignore .gitignore.backup
    fi
    
    # Add comprehensive .gitignore
    cat > .gitignore << 'EOF'
# Rust build artifacts
/target/
**/*.rs.bk
*.pdb

# Cargo
Cargo.lock
*.orig

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# Temporary folders
tmp/
temp/

# Rust specific
*.rlib
*.rmeta
*.so
*.dylib
*.dll
*.exe
EOF
    
    caddie cli:check "Comprehensive .gitignore added successfully"
    caddie cli:indent "File: $(pwd)/.gitignore"
    caddie cli:blank
    caddie cli:title "Next steps:"
    caddie cli:indent "1. Check git status: caddie rust:git:status"
    caddie cli:indent "2. Clean tracked artifacts: caddie rust:git:clean"
}

# Function to clean tracked build artifacts from git
function caddie_rust_git_clean() {
    if [ ! -d ".git" ]; then
        caddie cli:red "Error: Not in a git repository"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Cleaning tracked build artifacts from git..."
    
    # Check for tracked build artifacts
    local build_files=$(git ls-files | grep -E "(target/|\.rlib|\.rmeta|\.so|\.dylib|\.dll|\.exe|Cargo\.lock)" || true)
    
    if [ -z "$build_files" ]; then
        caddie cli:check "No tracked build artifacts found"
        return 0
    fi
    
    caddie cli:yellow "Found $(echo "$build_files" | wc -l) tracked build artifacts"
    caddie cli:indent "Removing from git tracking..."
    
    # Remove target directory if tracked
    if git ls-files | grep -q "^target/"; then
        git rm -r --cached target/ 2>/dev/null || true
        caddie cli:indent "Removed target/ directory from tracking"
    fi
    
    # Remove individual build files
    echo "$build_files" | while read -r file; do
        if [ -n "$file" ]; then
            git rm --cached "$file" 2>/dev/null || true
        fi
    done
    
    caddie cli:check "Build artifacts removed from git tracking"
    caddie cli:blank
    caddie cli:title "Next steps:"
    caddie cli:indent "1. Commit the changes: git commit -m 'Remove build artifacts'"
    caddie cli:indent "2. Verify cleanup: caddie rust:git:status"
}

# Function to clean Rust build artifacts
function caddie_rust_clean() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Cleaning Rust build artifacts..."
    cargo clean
    caddie cli:check "Rust build artifacts cleaned"
}

# Function to update Rust dependencies
function caddie_rust_update() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Updating Rust dependencies..."
    cargo update
    caddie cli:check "Rust dependencies updated"
}

# Function to add a Rust dependency
function caddie_rust_add() {
    caddie_rust_load_env
    
    local crate="$1"
    
    if [ -z "$crate" ]; then
        caddie cli:red "Error: Please provide a crate name"
        caddie cli:usage "caddie rust:add <crate>"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Adding dependency '$crate'..."
    cargo add "$crate"
    caddie cli:check "Dependency '$crate' added successfully"
}

# Function to remove a Rust dependency
function caddie_rust_remove() {
    caddie_rust_load_env
    
    local crate="$1"
    
    if [ -z "$crate" ]; then
        caddie cli:red "Error: Please provide a crate name"
        caddie cli:usage "caddie rust:remove <crate>"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Removing dependency '$crate'..."
    cargo remove "$crate"
    caddie cli:check "Dependency '$crate' removed successfully"
}

# Function to search crates.io
function caddie_rust_search() {
    caddie_rust_load_env
    
    local query="$1"
    
    if [ -z "$query" ]; then
        caddie cli:red "Error: Please provide a search query"
        caddie cli:usage "caddie rust:search <query>"
        return 1
    fi
    
    caddie cli:title "Searching crates.io for '$query'..."
    cargo search "$query"
}

# Function to show outdated Rust dependencies
function caddie_rust_outdated() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Checking for outdated Rust dependencies..."
    
    # Try cargo-outdated if available, otherwise show current versions
    if command -v cargo-outdated >/dev/null 2>&1; then
        cargo outdated
    else
        caddie cli:title "Installing cargo-outdated for better outdated dependency checking..."
        cargo install cargo-outdated
        cargo outdated
    fi
}

# Function to run unit tests only
function caddie_rust_test_unit() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running unit tests only..."
    cargo test --lib -- --nocapture
    caddie cli:check "Unit tests completed successfully"
}

# Function to run integration tests only
function caddie_rust_test_integration() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running integration tests only..."
    cargo test --tests -- --nocapture
    caddie cli:check "Integration tests completed successfully"
}

# Function to run all tests
function caddie_rust_test_all() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running all Rust tests..."
    cargo test -- --nocapture
    caddie cli:check "All Rust tests completed successfully"
}

# Function to run property-based tests
function caddie_rust_test_property() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running property-based tests..."
    cargo test --test property_tests -- --nocapture
    caddie cli:check "Property-based tests completed successfully"
}

# Function to run benchmarks
function caddie_rust_test_bench() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running benchmarks..."
    cargo bench
    caddie cli:check "Benchmarks completed successfully"
}

# Function to run tests in watch mode
function caddie_rust_test_watch() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running tests in watch mode..."
    if command -v cargo-watch >/dev/null 2>&1; then
        cargo watch -x test
    else
        caddie cli:title "Installing cargo-watch for test watching..."
        cargo install cargo-watch
        cargo watch -x test
    fi
}

# Function to run tests with coverage
function caddie_rust_test_coverage() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running tests with coverage..."
    if command -v cargo-tarpaulin >/dev/null 2>&1; then
        cargo tarpaulin --out Html
        caddie cli:check "Coverage report generated in target/tarpaulin/"
    else
        caddie cli:title "Installing cargo-tarpaulin for coverage..."
        cargo install cargo-tarpaulin
        cargo tarpaulin --out Html
        caddie cli:check "Coverage report generated in target/tarpaulin/"
    fi
}
function caddie_rust_audit() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        caddie cli:red "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    caddie cli:title "Running Rust security audit..."
    
    # Try cargo-audit if available, otherwise install it
    if command -v cargo-audit >/dev/null 2>&1; then
        cargo audit
    else
        caddie cli:title "Installing cargo-audit for security auditing..."
        cargo install cargo-audit
        cargo audit
    fi
}

# Function to switch Rust toolchain
function caddie_rust_toolchain() {
    caddie_rust_load_env
    
    local version="$1"
    
    if [ -z "$version" ]; then
        caddie cli:red "Error: Please provide a toolchain version"
        caddie cli:usage "caddie rust:toolchain <version>"
        caddie cli:thought "Examples: stable, beta, nightly, 1.70.0"
        return 1
    fi
    
    caddie cli:title "Switching to Rust toolchain '$version'..."
    rustup default "$version"
    caddie cli:check "Switched to Rust toolchain '$version'"
    caddie cli:indent "Current version: $(rustc --version)"
}

# Function to add Rust compilation target
function caddie_rust_target() {
    caddie_rust_load_env
    
    local target="$1"
    
    if [ -z "$target" ]; then
        caddie cli:red "Error: Please provide a target"
        caddie cli:usage "caddie rust:target <target>"
        caddie cli:thought "Examples: x86_64-unknown-linux-gnu, aarch64-apple-darwin"
        return 1
    fi
    
    caddie cli:title "Adding Rust target '$target'..."
    rustup target add "$target"
    caddie cli:check "Added Rust target '$target'"
}

# Function to install Rust component
function caddie_rust_component() {
    caddie_rust_load_env
    
    local component="$1"
    
    if [ -z "$component" ]; then
        caddie cli:red "Error: Please provide a component name"
        caddie cli:usage "caddie rust:component <component>"
        caddie cli:thought "Examples: clippy, rustfmt, rust-src"
        return 1
    fi
    
    caddie cli:title "Installing Rust component '$component'..."
    rustup component add "$component"
    caddie cli:check "Installed Rust component '$component'"
}

# Function to display Rust module help
function caddie_rust_help() {
    caddie cli:title "Rust Development Tools"
    caddie cli:blank
    caddie cli:usage "caddie rust:<command>"
    caddie cli:blank
    caddie cli:title "Project Management:"
    caddie cli:indent "init <name>        Create new Rust project with .gitignore"
    caddie cli:indent "new <name>         Create new Rust project"
    caddie cli:indent "build              Build current project"
    caddie cli:indent "run [args]         Run project (forwards args to cargo run)"
    caddie cli:indent "run:example <name> Run a Cargo example (cargo run --example <name>)"
    caddie cli:indent "                   Example: caddie rust:run --example simple_demo"
    caddie cli:indent "test               Run all tests"
    caddie cli:indent "test:unit          Run unit tests only"
    caddie cli:indent "test:integration   Run integration tests only"
    caddie cli:indent "test:all           Run all tests"
    caddie cli:indent "test:property      Run property-based tests"
    caddie cli:indent "test:bench         Run benchmarks"
    caddie cli:indent "test:watch         Run tests in watch mode"
    caddie cli:indent "test:coverage      Run tests with coverage"
    caddie cli:indent "check              Check without building"
    caddie cli:indent "clean              Clean build artifacts"
    caddie cli:blank
    caddie cli:title "Git Integration:"
    caddie cli:indent "git:status         Check git status for build artifacts"
    caddie cli:indent "gitignore          Add comprehensive .gitignore"
    caddie cli:indent "git:clean          Remove tracked build artifacts"
    caddie cli:blank
    caddie cli:title "Dependency Management:"
    caddie cli:indent "update            Update dependencies"
    caddie cli:indent "add <crate>       Add dependency to Cargo.toml"
    caddie cli:indent "remove <crate>    Remove dependency"
    caddie cli:indent "search <query>    Search crates.io"
    caddie cli:indent "outdated          Show outdated dependencies"
    caddie cli:indent "audit             Security audit"
    caddie cli:blank
    caddie cli:title "Toolchain Management:"
    caddie cli:indent "toolchain <ver>   Switch toolchain (stable/beta/nightly)"
    caddie cli:indent "target <target>   Add compilation target"
    caddie cli:indent "component <comp>  Install component (clippy/rustfmt/etc)"
    caddie cli:blank
    caddie cli:title "Examples:"
    caddie cli:indent "caddie rust:init myproject"
    caddie cli:indent "caddie rust:new myproject"
    caddie cli:indent "caddie rust:build"
    caddie cli:indent "caddie rust:test:unit"
    caddie cli:indent "caddie rust:test:integration"
    caddie cli:indent "caddie rust:git:status"
    caddie cli:indent "caddie rust:gitignore"
    caddie cli:indent "caddie rust:add serde"
    caddie cli:indent "caddie rust:toolchain nightly"
    caddie cli:indent "caddie rust:component clippy"
    caddie cli:blank
    return 0
}

function caddie_rust_description() {
    echo 'Rust development tools'
    return 0
}

# Export Rust functions
export -f caddie_rust_load_env
export -f caddie_rust_description
export -f caddie_rust_init
export -f caddie_rust_new
export -f caddie_rust_build
export -f caddie_rust_run
export -f caddie_rust_run_example
export -f caddie_rust_test
export -f caddie_rust_test_unit
export -f caddie_rust_test_integration
export -f caddie_rust_test_all
export -f caddie_rust_test_property
export -f caddie_rust_test_bench
export -f caddie_rust_test_watch
export -f caddie_rust_test_coverage
export -f caddie_rust_check
export -f caddie_rust_clean
export -f caddie_rust_update
export -f caddie_rust_add
export -f caddie_rust_remove
export -f caddie_rust_search
export -f caddie_rust_outdated
export -f caddie_rust_audit
export -f caddie_rust_toolchain
export -f caddie_rust_target
export -f caddie_rust_component
export -f caddie_rust_git_status
export -f caddie_rust_gitignore
export -f caddie_rust_git_clean
export -f caddie_rust_help