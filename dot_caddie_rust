#!/bin/bash

# Caddie.sh - Rust Environment Management
# This file contains all Rust-related functions

caddie_rust_load_env() {
    if [ -f "$HOME/.cargo/env" ]; then
        # shellcheck disable=SC1091
        source "$HOME/.cargo/env"
    else
        echo "Error: Rust environment not found at ~/.cargo/env"
        echo "  Please install Rust first: https://rustup.rs/"
        return 1
    fi
}

# Source Rust environment when module is loaded
caddie_rust_load_env

# Function to create a new Rust project
caddie_rust_new() {
    caddie_rust_load_env
    
    local project_name="$1"
    
    if [ -z "$project_name" ]; then
        echo "Error: Please provide a project name"
        echo "Usage: caddie rust:new <name>"
        return 1
    fi
    
    if [ -d "$project_name" ]; then
        echo "Error: Directory '$project_name' already exists"
        return 1
    fi
    
    echo "Creating new Rust project '$project_name'..."
    cargo new "$project_name"
    echo "✓ Rust project '$project_name' created successfully"
    echo "  Location: $(pwd)/$project_name"
    echo "  Enter directory: cd $project_name"
    echo "  Build project: caddie rust:build"
}

# Function to build current Rust project
caddie_rust_build() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Building Rust project..."
    cargo build
    echo "✓ Rust project built successfully"
}

# Function to run current Rust project
caddie_rust_run() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Running Rust project..."
    cargo run
    echo "✓ Rust project ran successfully"
}

# Function to run Rust tests
caddie_rust_test() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Running Rust tests..."
    cargo test
    echo "✓ Rust tests completed successfully"
}

# Function to check Rust project without building
caddie_rust_check() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Checking Rust project..."
    cargo check
    echo "✓ Rust project check passed"
}

# Function to clean Rust build artifacts
caddie_rust_clean() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Cleaning Rust build artifacts..."
    cargo clean
    echo "✓ Rust build artifacts cleaned"
}

# Function to update Rust dependencies
caddie_rust_update() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Updating Rust dependencies..."
    cargo update
    echo "✓ Rust dependencies updated"
}

# Function to add a Rust dependency
caddie_rust_add() {
    caddie_rust_load_env
    
    local crate="$1"
    
    if [ -z "$crate" ]; then
        echo "Error: Please provide a crate name"
        echo "Usage: caddie rust:add <crate>"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Adding dependency '$crate'..."
    cargo add "$crate"
    echo "✓ Dependency '$crate' added successfully"
}

# Function to remove a Rust dependency
caddie_rust_remove() {
    caddie_rust_load_env
    
    local crate="$1"
    
    if [ -z "$crate" ]; then
        echo "Error: Please provide a crate name"
        echo "Usage: caddie rust:remove <crate>"
        return 1
    fi
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Removing dependency '$crate'..."
    cargo remove "$crate"
    echo "✓ Dependency '$crate' removed successfully"
}

# Function to search crates.io
caddie_rust_search() {
    caddie_rust_load_env
    
    local query="$1"
    
    if [ -z "$query" ]; then
        echo "Error: Please provide a search query"
        echo "Usage: caddie rust:search <query>"
        return 1
    fi
    
    echo "Searching crates.io for '$query'..."
    cargo search "$query"
}

# Function to show outdated Rust dependencies
caddie_rust_outdated() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Checking for outdated Rust dependencies..."
    
    # Try cargo-outdated if available, otherwise show current versions
    if command -v cargo-outdated >/dev/null 2>&1; then
        cargo outdated
    else
        echo "Installing cargo-outdated for better outdated dependency checking..."
        cargo install cargo-outdated
        cargo outdated
    fi
}

# Function to run Rust security audit
caddie_rust_audit() {
    caddie_rust_load_env
    
    if [ ! -f "Cargo.toml" ]; then
        echo "Error: Not in a Rust project directory (Cargo.toml not found)"
        return 1
    fi
    
    echo "Running Rust security audit..."
    
    # Try cargo-audit if available, otherwise install it
    if command -v cargo-audit >/dev/null 2>&1; then
        cargo audit
    else
        echo "Installing cargo-audit for security auditing..."
        cargo install cargo-audit
        cargo audit
    fi
}

# Function to switch Rust toolchain
caddie_rust_toolchain() {
    caddie_rust_load_env
    
    local version="$1"
    
    if [ -z "$version" ]; then
        echo "Error: Please provide a toolchain version"
        echo "Usage: caddie rust:toolchain <version>"
        echo "Examples: stable, beta, nightly, 1.70.0"
        return 1
    fi
    
    echo "Switching to Rust toolchain '$version'..."
    rustup default "$version"
    echo "✓ Switched to Rust toolchain '$version'"
    echo "  Current version: $(rustc --version)"
}

# Function to add Rust compilation target
caddie_rust_target() {
    caddie_rust_load_env
    
    local target="$1"
    
    if [ -z "$target" ]; then
        echo "Error: Please provide a target"
        echo "Usage: caddie rust:target <target>"
        echo "Examples: x86_64-unknown-linux-gnu, aarch64-apple-darwin"
        return 1
    fi
    
    echo "Adding Rust target '$target'..."
    rustup target add "$target"
    echo "✓ Added Rust target '$target'"
}

# Function to install Rust component
caddie_rust_component() {
    caddie_rust_load_env
    
    local component="$1"
    
    if [ -z "$component" ]; then
        echo "Error: Please provide a component name"
        echo "Usage: caddie rust:component <component>"
        echo "Examples: clippy, rustfmt, rust-src"
        return 1
    fi
    
    echo "Installing Rust component '$component'..."
    rustup component add "$component"
    echo "✓ Installed Rust component '$component'"
}

# Main registration function for rust module
rust_register() {
    rust_help_register
    rust_commands_register
}

# Register help information
rust_help_register() {
    caddie_help_append "rust" "Rust development tools"
}

# Register commands
rust_commands_register() {
    caddie_commands_append "rust:new|caddie_rust_new|Create new Rust project"
    caddie_commands_append "rust:build|caddie_rust_build|Build current project"
    caddie_commands_append "rust:run|caddie_rust_run|Run current project"
    caddie_commands_append "rust:test|caddie_rust_test|Run tests"
    caddie_commands_append "rust:check|caddie_rust_check|Check without building"
    caddie_commands_append "rust:clean|caddie_rust_clean|Clean build artifacts"
    caddie_commands_append "rust:update|caddie_rust_update|Update dependencies"
    caddie_commands_append "rust:add|caddie_rust_add|Add dependency to Cargo.toml"
    caddie_commands_append "rust:remove|caddie_rust_remove|Remove dependency"
    caddie_commands_append "rust:search|caddie_rust_search|Search crates.io"
    caddie_commands_append "rust:outdated|caddie_rust_outdated|Show outdated dependencies"
    caddie_commands_append "rust:audit|caddie_rust_audit|Security audit"
    caddie_commands_append "rust:toolchain|caddie_rust_toolchain|Switch toolchain (stable/beta/nightly)"
    caddie_commands_append "rust:target|caddie_rust_target|Add compilation target"
    caddie_commands_append "rust:component|caddie_rust_component|Install component (clippy/rustfmt/etc)"
    caddie_commands_append "rust:help|caddie_rust_help|Show detailed Rust help"
}

# Function to display Rust module help
caddie_rust_help() {
    echo "Rust Development Tools"
    echo "====================="
    echo ""
    echo "Usage: caddie rust:<command>"
    echo ""
    echo "Project Management:"
    echo "  new <name>        Create new Rust project"
    echo "  build             Build current project"
    echo "  run               Run current project"
    echo "  test              Run tests"
    echo "  check             Check without building"
    echo "  clean             Clean build artifacts"
    echo ""
    echo "Dependency Management:"
    echo "  update            Update dependencies"
    echo "  add <crate>       Add dependency to Cargo.toml"
    echo "  remove <crate>    Remove dependency"
    echo "  search <query>    Search crates.io"
    echo "  outdated          Show outdated dependencies"
    echo "  audit             Security audit"
    echo ""
    echo "Toolchain Management:"
    echo "  toolchain <ver>   Switch toolchain (stable/beta/nightly)"
    echo "  target <target>   Add compilation target"
    echo "  component <comp>  Install component (clippy/rustfmt/etc)"
    echo ""
    echo "Examples:"
    echo "  caddie rust:new myproject"
    echo "  caddie rust:build"
    echo "  caddie rust:add serde"
    echo "  caddie rust:toolchain nightly"
    echo "  caddie rust:component clippy"
}

# Export Rust functions
export -f caddie_rust_load_env
export -f rust_register
export -f caddie_rust_new
export -f caddie_rust_build
export -f caddie_rust_run
export -f caddie_rust_test
export -f caddie_rust_check
export -f caddie_rust_clean
export -f caddie_rust_update
export -f caddie_rust_add
export -f caddie_rust_remove
export -f caddie_rust_search
export -f caddie_rust_outdated
export -f caddie_rust_audit
export -f caddie_rust_toolchain
export -f caddie_rust_target
export -f caddie_rust_component
export -f caddie_rust_help
