# Caddie.sh Prompt System
# This file provides a simple, reliable prompt using tput colors

# NOTE: Do NOT try to use the 'caddie cli' functions here.

source "$HOME/.caddie_modules/.caddie_github"

# Function to get caddie version
function get_caddie_version() {
    if [ -f "$HOME/.caddie_version" ]; then
        source "$HOME/.caddie_version"
        echo "$CADDIE_SH_VERSION"
    else
        echo "unknown"
    fi
}

# Function to set caddie prompt
function set_caddie_prompt() {
    local version=$(get_caddie_version)
    echo "[${BLUE}Caddie-${version}${RESET}] "
}

# Function to set git branch description prompt (optional)
function set-git-branch-description-prompt() {
    if [ -d '.git' ]; then
        local branch=`git symbolic-ref --short HEAD 2>/dev/null`
        local desc=`git config branch.${branch}.description`

        if [[ -n $desc ]]; then
            echo " ($desc) "
        fi
    fi
}

# Main prompt setup function
function set_caddie_git_prompt() {
    # Set the start of the git prompt (before git info)
    GIT_PROMPT_START='$(set_caddie_prompt)'
    
    # Set the end of the git prompt (after git info)
    GIT_PROMPT_END='$(set-git-branch-description-prompt)'
    export GIT_PROMPT_END+=' \n\[\033[0;37m\]$(date +%H:%M)\[\033[0;0m\] $ '
}

# CSV prompt helper
function caddie_prompt_csv_segment() {
    local config_file="${CADDIE_CSV_CONFIG_FILE:-$HOME/.caddie_data/csv_config}"
    local csv_file="${CADDIE_CSV_FILE:-}"

    if [ -z "$csv_file" ] && [ -f "$config_file" ]; then
        csv_file=$(source "$config_file" 2>/dev/null || true; printf '%s' "${CADDIE_CSV_FILE:-}")
    fi

    if [ -z "$csv_file" ]; then
        return 0
    fi

    local display="$csv_file"
    if [[ "$display" == "$HOME"* ]]; then
        display="~${display#$HOME}"
    fi

    printf '[%scsv:%s%s]' "${CYAN}" "$display" "${RESET}"
    return 0
}

# Main prompt setup function
function set_caddie_prompt() {
    local version=$(get_caddie_version)
    local git_info=""
    local github_info=""
    local csv_info=""
    
    # Add GitHub CLI authentication status
    local github_status=$(gh auth status 2>/dev/null)
    
    if [ -n "${github_status}" ]; then
        # Parse the actual gh auth status output format
        if echo "${github_status}" | grep -q "Logged in to github.com account"; then
            # Extract account name from "Logged in to github.com account wbailey (keyring)"
            local account=$(echo "${github_status}" | grep "Logged in to github.com account" | sed 's/.*account \([^ ]*\).*/\1/')
            github_info="[${GREEN}gh:${account}${RESET}]"
        elif echo "${github_status}" | grep -q "Not logged in"; then
            github_info="[${RED}gh:none${RESET}]"
        else
            github_info="[${YELLOW}gh:unknown${RESET}]"
        fi
    else
        # gh auth status failed (not installed or not authenticated)
        github_info="[${RED}gh:none${RESET}]"
    fi
    
    if [ -d '.git' ]; then
        local branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo 'detached')
        local git_status=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')
        
        if [ "$git_status" -gt 0 ]; then
            git_info=" (${PURPLE}${branch}${RESET}|${CYAN}+${git_status}${RESET})"
        else
            git_info=" (${PURPLE}${branch}${RESET}|${GREEN}âœ“${RESET})"
        fi
    fi

    local csv_segment
    csv_segment=$(caddie_prompt_csv_segment)
    if [ -n "$csv_segment" ]; then
        csv_info="$csv_segment"
    fi
    
    export PS1="[${BLUE}Caddie-${version}${RESET}]${github_info}${csv_info}${git_info} ${YELLOW}\w${RESET} $ "
}

# Set PROMPT_COMMAND to rebuild prompt before each display
export PROMPT_COMMAND="set_caddie_prompt"
