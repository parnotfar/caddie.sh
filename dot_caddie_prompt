# Caddie.sh Prompt System
# This file provides a simple, reliable prompt using tput colors

# Source colors
source ~/.caddie_colors

# Function to get caddie version
function get_caddie_version() {
    if [ -f "$HOME/.caddie_version" ]; then
        source "$HOME/.caddie_version"
        echo "$CADDIE_SH_VERSION"
    else
        echo "unknown"
    fi
}

# Function to set caddie prompt
function set_caddie_prompt() {
    local version=$(get_caddie_version)
    echo "[${BLUE}Caddie-${version}${RESET}] "
}

# Function to set git branch description prompt (optional)
function set-git-branch-description-prompt() {
    if [ -d '.git' ]; then
        local branch=`git symbolic-ref --short HEAD 2>/dev/null`
        local desc=`git config branch.${branch}.description`

        if [[ -n $desc ]]; then
            echo " ($desc) "
        fi
    fi
}

# Main prompt setup function
function set_caddie_git_prompt() {
    # Set the start of the git prompt (before git info)
    GIT_PROMPT_START='$(set_caddie_prompt)'
    
    # Set the end of the git prompt (after git info)
    GIT_PROMPT_END='$(set-git-branch-description-prompt)'
    export GIT_PROMPT_END+=' \n\[\033[0;37m\]$(date +%H:%M)\[\033[0;0m\] $ '
}

# Alternative: Simple prompt without bash-git-prompt dependency
function set_simple_caddie_prompt() {
    local version=$(get_caddie_version)
    local git_branch=""
    
    if [ -d '.git' ]; then
        git_branch=" (${PURPLE}$(git symbolic-ref --short HEAD 2>/dev/null || echo 'detached')${RESET})"
    fi
    
    export PS1="[${BLUE}Caddie-${version}${RESET}]${git_branch} ${YELLOW}\w${RESET} $ "
}
