#!/usr/bin/env bash

# Caddie.sh prompt helpers with PS1-safe color wrapping

function __wrap_nonprint() {
  case "$1" in
    *"\["*"\]"*) printf '%s' "$1" ;;
    *)             printf '\[%s\]' "$1" ;;
  esac
}

RAW_RESET="$(tput sgr0 2>/dev/null || printf '\033[0m')"
RAW_RED="$(tput setaf 1 2>/dev/null || printf '\033[31m')"
RAW_GREEN="$(tput setaf 2 2>/dev/null || printf '\033[32m')"
RAW_YELLOW="$(tput setaf 3 2>/dev/null || printf '\033[33m')"
RAW_BLUE="$(tput setaf 4 2>/dev/null || printf '\033[34m')"
RAW_PURPLE="$(tput setaf 5 2>/dev/null || printf '\033[35m')"
RAW_CYAN="$(tput setaf 6 2>/dev/null || printf '\033[36m')"

PS_RESET="$(__wrap_nonprint "$RAW_RESET")"
PS_RED="$(__wrap_nonprint "$RAW_RED")"
PS_GREEN="$(__wrap_nonprint "$RAW_GREEN")"
PS_YELLOW="$(__wrap_nonprint "$RAW_YELLOW")"
PS_BLUE="$(__wrap_nonprint "$RAW_BLUE")"
PS_PURPLE="$(__wrap_nonprint "$RAW_PURPLE")"
PS_CYAN="$(__wrap_nonprint "$RAW_CYAN")"

CADDIE_PROMPT_SEGMENTS=()

function caddie_prompt_register_segment() {
  local fn="$1"
  if [ -z "$fn" ]; then
    return 1
  fi
  if ! declare -F "$fn" >/dev/null 2>&1; then
    return 1
  fi
  local existing
  for existing in "${CADDIE_PROMPT_SEGMENTS[@]}"; do
    if [ "$existing" = "$fn" ]; then
      return 0
    fi
  done
  CADDIE_PROMPT_SEGMENTS+=("$fn")
  return 0
}

function caddie_prompt_clear_segments() {
  CADDIE_PROMPT_SEGMENTS=()
  return 0
}

export -f caddie_prompt_register_segment
export -f caddie_prompt_clear_segments

function __caddie_version() {
  if [ -f "$HOME/.caddie_version" ]; then
    # shellcheck disable=SC1090
    . "$HOME/.caddie_version"
    printf '%s' "${CADDIE_SH_VERSION:-unknown}"
  else
    printf 'unknown'
  fi
}

function __ps1_branch() {
  git rev-parse --abbrev-ref HEAD 2>/dev/null || return 0
}

function set_caddie_prompt_ps1() {
  local version branch git_info github_info changes github_status="" module_line=""
  version="$(__caddie_version)"

  if command -v gh >/dev/null 2>&1; then
    if github_status="$(gh auth status 2>/dev/null)"; then
      if printf '%s' "$github_status" | grep -q "Logged in to github.com account"; then
        local account
        account="$(printf '%s' "$github_status" | sed -n 's/.*account \([^ ]*\).*/\1/p')"
        github_info="[${PS_GREEN}gh:${account}${PS_RESET}]"
      else
        github_info="[${PS_YELLOW}gh:unknown${PS_RESET}]"
      fi
    else
      github_info="[${PS_RED}gh:none${PS_RESET}]"
    fi
  else
    github_info="[${PS_RED}gh:missing${PS_RESET}]"
  fi

  branch="$(__ps1_branch)"
  if [ -n "$branch" ]; then
    changes="$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')"
    if [ "${changes:-0}" -gt 0 ]; then
      git_info=" (${PS_PURPLE}${branch}${PS_RESET}|${PS_CYAN}+${changes}${PS_RESET})"
    else
      git_info=" (${PS_PURPLE}${branch}${PS_RESET}|${PS_GREEN}âœ“${PS_RESET})"
    fi
  else
    git_info=""
  fi

  local -a prompt_segments=()
  local segment_fn segment_output
  for segment_fn in "${CADDIE_PROMPT_SEGMENTS[@]}"; do
    if declare -F "$segment_fn" >/dev/null 2>&1; then
      segment_output="$($segment_fn)"
      if [ -n "$segment_output" ]; then
        prompt_segments+=("$segment_output")
      fi
    fi
  done

  local module_line=""
  if [ ${#prompt_segments[@]} -gt 0 ]; then
    local IFS=$' '
    module_line="${prompt_segments[*]}"
  fi

  local base_line="[${PS_BLUE}Caddie-${version}${PS_RESET}]${github_info}${git_info}"
  local path_fragment="${PS_YELLOW}\w${PS_RESET} \$ "

  PROMPT_DIRTRIM=3
  PS1=""
  if [ -n "$module_line" ]; then
    PS1+="$module_line"$'\n'
  fi
  PS1+="$base_line ${path_fragment}"
}

PROMPT_COMMAND='set_caddie_prompt_ps1'
shopt -s checkwinsize

# Backward compatibility for modules still invoking set_caddie_prompt directly
function set_caddie_prompt() {
  set_caddie_prompt_ps1
}
